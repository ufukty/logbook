// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.collaboration.sql

package database

import (
	"context"

	"logbook/models/columns"
)

const deleteCollaboration = `-- name: DeleteCollaboration :exec
UPDATE
    "collaboration"
SET
    "deleted_at" = CURRENT_TIMESTAMP
WHERE
    "coid" = $1
`

func (q *Queries) DeleteCollaboration(ctx context.Context, coid columns.CollaborationId) error {
	_, err := q.db.Exec(ctx, deleteCollaboration, coid)
	return err
}

const deleteGroupTypeCollaboratorByCollaboratorId = `-- name: DeleteGroupTypeCollaboratorByCollaboratorId :exec
UPDATE
    "collaborator_group"
SET
    "deleted_at" = CURRENT_TIMESTAMP
WHERE
    "coid" = $1
    AND "crid" = $2
`

type DeleteGroupTypeCollaboratorByCollaboratorIdParams struct {
	Coid columns.CollaborationId
	Crid columns.CollaboratorId
}

func (q *Queries) DeleteGroupTypeCollaboratorByCollaboratorId(ctx context.Context, arg DeleteGroupTypeCollaboratorByCollaboratorIdParams) error {
	_, err := q.db.Exec(ctx, deleteGroupTypeCollaboratorByCollaboratorId, arg.Coid, arg.Crid)
	return err
}

const deleteUserTypeCollaboratorByCollaboratorId = `-- name: DeleteUserTypeCollaboratorByCollaboratorId :exec
UPDATE
    "collaborator_user"
SET
    "deleted_at" = CURRENT_TIMESTAMP
WHERE
    "coid" = $1
    AND "crid" = $2
`

type DeleteUserTypeCollaboratorByCollaboratorIdParams struct {
	Coid columns.CollaborationId
	Crid columns.CollaboratorId
}

func (q *Queries) DeleteUserTypeCollaboratorByCollaboratorId(ctx context.Context, arg DeleteUserTypeCollaboratorByCollaboratorIdParams) error {
	_, err := q.db.Exec(ctx, deleteUserTypeCollaboratorByCollaboratorId, arg.Coid, arg.Crid)
	return err
}

const insertCollaboration = `-- name: InsertCollaboration :one
INSERT INTO "collaboration"("coid", "creator", "admin", "leader")
    VALUES ($1, $2, $3, $4)
RETURNING
    coid, caid, creator, admin, leader, created_at, deleted_at
`

type InsertCollaborationParams struct {
	Coid    columns.CollaborationId
	Creator columns.UserId
	Admin   columns.UserId
	Leader  columns.UserId
}

func (q *Queries) InsertCollaboration(ctx context.Context, arg InsertCollaborationParams) (Collaboration, error) {
	row := q.db.QueryRow(ctx, insertCollaboration,
		arg.Coid,
		arg.Creator,
		arg.Admin,
		arg.Leader,
	)
	var i Collaboration
	err := row.Scan(
		&i.Coid,
		&i.Caid,
		&i.Creator,
		&i.Admin,
		&i.Leader,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertGroupTypeCollaborator = `-- name: InsertGroupTypeCollaborator :one
INSERT INTO "collaborator_group"("coid", "gid")
    VALUES ($1, $2)
RETURNING
    crid, coid, gid, created_at, deleted_at
`

type InsertGroupTypeCollaboratorParams struct {
	Coid columns.CollaborationId
	Gid  columns.GroupId
}

func (q *Queries) InsertGroupTypeCollaborator(ctx context.Context, arg InsertGroupTypeCollaboratorParams) (CollaboratorGroup, error) {
	row := q.db.QueryRow(ctx, insertGroupTypeCollaborator, arg.Coid, arg.Gid)
	var i CollaboratorGroup
	err := row.Scan(
		&i.Crid,
		&i.Coid,
		&i.Gid,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertUserTypeCollaborator = `-- name: InsertUserTypeCollaborator :one
INSERT INTO "collaborator_user"("coid", "uid")
    VALUES ($1, $2)
RETURNING
    crid, coid, uid, created_at, deleted_at
`

type InsertUserTypeCollaboratorParams struct {
	Coid columns.CollaborationId
	Uid  columns.UserId
}

func (q *Queries) InsertUserTypeCollaborator(ctx context.Context, arg InsertUserTypeCollaboratorParams) (CollaboratorUser, error) {
	row := q.db.QueryRow(ctx, insertUserTypeCollaborator, arg.Coid, arg.Uid)
	var i CollaboratorUser
	err := row.Scan(
		&i.Crid,
		&i.Coid,
		&i.Uid,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listGroupTypeCollaborators = `-- name: ListGroupTypeCollaborators :many
SELECT
    crid, coid, gid, created_at, deleted_at
FROM
    "collaborator_group"
WHERE
    "coid" = $1
    AND "deleted_at" IS NULL
LIMIT 100
`

func (q *Queries) ListGroupTypeCollaborators(ctx context.Context, coid columns.CollaborationId) ([]CollaboratorGroup, error) {
	rows, err := q.db.Query(ctx, listGroupTypeCollaborators, coid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CollaboratorGroup
	for rows.Next() {
		var i CollaboratorGroup
		if err := rows.Scan(
			&i.Crid,
			&i.Coid,
			&i.Gid,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserTypeCollaborators = `-- name: ListUserTypeCollaborators :many
SELECT
    crid, coid, uid, created_at, deleted_at
FROM
    "collaborator_user"
WHERE
    "coid" = $1
    AND "deleted_at" IS NULL
LIMIT 100
`

func (q *Queries) ListUserTypeCollaborators(ctx context.Context, coid columns.CollaborationId) ([]CollaboratorUser, error) {
	rows, err := q.db.Query(ctx, listUserTypeCollaborators, coid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CollaboratorUser
	for rows.Next() {
		var i CollaboratorUser
		if err := rows.Scan(
			&i.Crid,
			&i.Coid,
			&i.Uid,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectCollaboration = `-- name: SelectCollaboration :one
SELECT
    coid, caid, creator, admin, leader, created_at, deleted_at
FROM
    "collaboration"
WHERE
    "coid" = $1
`

func (q *Queries) SelectCollaboration(ctx context.Context, coid columns.CollaborationId) (Collaboration, error) {
	row := q.db.QueryRow(ctx, selectCollaboration, coid)
	var i Collaboration
	err := row.Scan(
		&i.Coid,
		&i.Caid,
		&i.Creator,
		&i.Admin,
		&i.Leader,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const selectCollaborationOnControlArea = `-- name: SelectCollaborationOnControlArea :one
SELECT
    coid, caid, creator, admin, leader, created_at, deleted_at
FROM
    "collaboration"
WHERE
    "caid" = $1
    AND "deleted_at" IS NULL
LIMIT 50
`

func (q *Queries) SelectCollaborationOnControlArea(ctx context.Context, caid columns.ControlAreaId) (Collaboration, error) {
	row := q.db.QueryRow(ctx, selectCollaborationOnControlArea, caid)
	var i Collaboration
	err := row.Scan(
		&i.Coid,
		&i.Caid,
		&i.Creator,
		&i.Admin,
		&i.Leader,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const selectGroupTypeCollaboratorByGroupId = `-- name: SelectGroupTypeCollaboratorByGroupId :one
SELECT
    crid, coid, gid, created_at, deleted_at
FROM
    "collaborator_group"
WHERE
    "coid" = $1
    AND "gid" = $2
    AND "deleted_at" IS NULL
LIMIT 1
`

type SelectGroupTypeCollaboratorByGroupIdParams struct {
	Coid columns.CollaborationId
	Gid  columns.GroupId
}

func (q *Queries) SelectGroupTypeCollaboratorByGroupId(ctx context.Context, arg SelectGroupTypeCollaboratorByGroupIdParams) (CollaboratorGroup, error) {
	row := q.db.QueryRow(ctx, selectGroupTypeCollaboratorByGroupId, arg.Coid, arg.Gid)
	var i CollaboratorGroup
	err := row.Scan(
		&i.Crid,
		&i.Coid,
		&i.Gid,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const selectUserTypeCollaboratorByUserId = `-- name: SelectUserTypeCollaboratorByUserId :one
SELECT
    crid, coid, uid, created_at, deleted_at
FROM
    "collaborator_user"
WHERE
    "coid" = $1
    AND "uid" = $2
    AND "deleted_at" IS NULL
LIMIT 1
`

type SelectUserTypeCollaboratorByUserIdParams struct {
	Coid columns.CollaborationId
	Uid  columns.UserId
}

func (q *Queries) SelectUserTypeCollaboratorByUserId(ctx context.Context, arg SelectUserTypeCollaboratorByUserIdParams) (CollaboratorUser, error) {
	row := q.db.QueryRow(ctx, selectUserTypeCollaboratorByUserId, arg.Coid, arg.Uid)
	var i CollaboratorUser
	err := row.Scan(
		&i.Crid,
		&i.Coid,
		&i.Uid,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
