// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.viewprefs.sql

package database

import (
	"context"

	"logbook/models/columns"
)

const insertObjectiveViewPrefs = `-- name: InsertObjectiveViewPrefs :one
INSERT INTO "objective_view_prefs"("uid", "oid", "fold")
    VALUES ($1, $2, $3)
RETURNING
    uid, oid, fold
`

type InsertObjectiveViewPrefsParams struct {
	Uid  columns.UserId
	Oid  columns.ObjectiveId
	Fold bool
}

func (q *Queries) InsertObjectiveViewPrefs(ctx context.Context, arg InsertObjectiveViewPrefsParams) (ObjectiveViewPrefs, error) {
	row := q.db.QueryRow(ctx, insertObjectiveViewPrefs, arg.Uid, arg.Oid, arg.Fold)
	var i ObjectiveViewPrefs
	err := row.Scan(&i.Uid, &i.Oid, &i.Fold)
	return i, err
}

const selectObjectiveViewPrefs = `-- name: SelectObjectiveViewPrefs :one
SELECT
    uid, oid, fold
FROM
    "objective_view_prefs"
WHERE
    "uid" = $1
    AND "oid" = $2
LIMIT 1
`

type SelectObjectiveViewPrefsParams struct {
	Uid columns.UserId
	Oid columns.ObjectiveId
}

func (q *Queries) SelectObjectiveViewPrefs(ctx context.Context, arg SelectObjectiveViewPrefsParams) (ObjectiveViewPrefs, error) {
	row := q.db.QueryRow(ctx, selectObjectiveViewPrefs, arg.Uid, arg.Oid)
	var i ObjectiveViewPrefs
	err := row.Scan(&i.Uid, &i.Oid, &i.Fold)
	return i, err
}
