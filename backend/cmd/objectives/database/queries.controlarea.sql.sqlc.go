// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.controlarea.sql

package database

import (
	"context"

	"logbook/models/columns"
)

const deleteControlArea = `-- name: DeleteControlArea :one
UPDATE
    "control_area"
SET
    "deleted_at" = TIMESTAMP
WHERE
    "caid" = $1
RETURNING
    caid, root, catype, created_at, deleted_at
`

func (q *Queries) DeleteControlArea(ctx context.Context, caid columns.ControlAreaId) (ControlArea, error) {
	row := q.db.QueryRow(ctx, deleteControlArea, caid)
	var i ControlArea
	err := row.Scan(
		&i.Caid,
		&i.Root,
		&i.Catype,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertControlArea = `-- name: InsertControlArea :one
INSERT INTO "control_area"("root", "catype")
    VALUES ($1, $2)
RETURNING
    caid, root, catype, created_at, deleted_at
`

type InsertControlAreaParams struct {
	Root   columns.ObjectiveId
	Catype ControlAreaType
}

func (q *Queries) InsertControlArea(ctx context.Context, arg InsertControlAreaParams) (ControlArea, error) {
	row := q.db.QueryRow(ctx, insertControlArea, arg.Root, arg.Catype)
	var i ControlArea
	err := row.Scan(
		&i.Caid,
		&i.Root,
		&i.Catype,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const selectControlAreaOnObjective = `-- name: SelectControlAreaOnObjective :one
SELECT
    caid, root, catype, created_at, deleted_at
FROM
    "control_area"
WHERE
    "root" = $1
LIMIT 1
`

func (q *Queries) SelectControlAreaOnObjective(ctx context.Context, root columns.ObjectiveId) (ControlArea, error) {
	row := q.db.QueryRow(ctx, selectControlAreaOnObjective, root)
	var i ControlArea
	err := row.Scan(
		&i.Caid,
		&i.Root,
		&i.Catype,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
