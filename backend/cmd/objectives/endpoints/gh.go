// Code generated by gohandlers v0.37.0. DO NOT EDIT.

package endpoints

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"strings"

	"github.com/ufukty/gohandlers/pkg/gohandlers"
)

func (pr *Private) ListHandlers() map[string]gohandlers.HandlerInfo {
	return map[string]gohandlers.HandlerInfo{
		"RockCreate": {Method: "POST", Path: "/rock-create", Ref: pr.RockCreate},
	}
}

func (pu *Public) ListHandlers() map[string]gohandlers.HandlerInfo {
	return map[string]gohandlers.HandlerInfo{
		"CreateObjective":   {Method: "POST", Path: "/create-objective", Ref: pu.CreateObjective},
		"GetPlacement":      {Method: "GET", Path: "/get-placement/{length}/{root}/{start}", Ref: pu.GetPlacement},
		"MarkComplete":      {Method: "PATCH", Path: "/mark-complete", Ref: pu.MarkComplete},
		"ReattachObjective": {Method: "PATCH", Path: "/reattach-objective", Ref: pu.ReattachObjective},
	}
}

func join(segments ...string) string {
	url := ""
	for i, segment := range segments {
		if i != 0 && !strings.HasPrefix(segment, "/") {
			url += "/"
		}
		url += segment
	}
	return url
}

func (bq RockCreateRequest) Build(host string) (*http.Request, error) {
	uri := "/rock-create"
	body := bytes.NewBuffer([]byte{})
	if err := json.NewEncoder(body).Encode(bq); err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("POST", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", "application/json")
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *RockCreateRequest) Parse(rq *http.Request) error {
	if !strings.HasPrefix(rq.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rq.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rq.Body).Decode(bq); err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}

func (bq RockCreateRequest) Validate() (issues map[string]any) {
	issues = map[string]any{}
	if issue := bq.UserId.Validate(); issue != nil {
		issues["uid"] = issue
	}
	return
}

func (bq CreateObjectiveRequest) Build(host string) (*http.Request, error) {
	uri := "/create-objective"
	body := bytes.NewBuffer([]byte{})
	if err := json.NewEncoder(body).Encode(bq); err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("POST", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", "application/json")
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *CreateObjectiveRequest) Parse(rq *http.Request) error {
	if !strings.HasPrefix(rq.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rq.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rq.Body).Decode(bq); err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}

func (bq CreateObjectiveRequest) Validate() (issues map[string]any) {
	issues = map[string]any{}
	if issue := bq.Content.Validate(); issue != nil {
		issues["content"] = issue
	}
	if issue := bq.Parent.Validate(); issue != nil {
		issues["parent"] = issue
	}
	return
}

func (bs CreateObjectiveResponse) Write(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(w).Encode(bs); err != nil {
		return fmt.Errorf("encoding the body: %w", err)
	}
	return nil
}

func (bs *CreateObjectiveResponse) Parse(rs *http.Response) error {
	if !strings.HasPrefix(rs.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rs.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rs.Body).Decode(bs); err != nil {
		return fmt.Errorf("decoding the body: %w", err)
	}
	return nil
}

func (bq GetPlacementRequest) Build(host string) (*http.Request, error) {
	uri := "/get-placement/{length}/{root}/{start}"
	encoded, err := bq.Length.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("GetPlacementRequest.Length.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{length}", encoded, 1)
	encoded, err = bq.Root.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("GetPlacementRequest.Root.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{root}", encoded, 1)
	encoded, err = bq.Start.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("GetPlacementRequest.Start.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{start}", encoded, 1)
	r, err := http.NewRequest("GET", join(host, uri), nil)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	return r, nil
}

func (bq *GetPlacementRequest) Parse(rq *http.Request) error {
	if err := bq.Length.FromRoute(rq.PathValue("length")); err != nil {
		return fmt.Errorf("GetPlacementRequest.Length.FromRoute: %w", err)
	}
	if err := bq.Root.FromRoute(rq.PathValue("root")); err != nil {
		return fmt.Errorf("GetPlacementRequest.Root.FromRoute: %w", err)
	}
	if err := bq.Start.FromRoute(rq.PathValue("start")); err != nil {
		return fmt.Errorf("GetPlacementRequest.Start.FromRoute: %w", err)
	}
	return nil
}

func (bq GetPlacementRequest) Validate() (issues map[string]any) {
	issues = map[string]any{}
	if issue := bq.Length.Validate(); issue != nil {
		issues["length"] = issue
	}
	if issue := bq.Root.Validate(); issue != nil {
		issues["root"] = issue
	}
	if issue := bq.Start.Validate(); issue != nil {
		issues["start"] = issue
	}
	return
}

func (bs GetPlacementResponse) Write(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(w).Encode(bs); err != nil {
		return fmt.Errorf("encoding the body: %w", err)
	}
	return nil
}

func (bs *GetPlacementResponse) Parse(rs *http.Response) error {
	if !strings.HasPrefix(rs.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rs.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rs.Body).Decode(bs); err != nil {
		return fmt.Errorf("decoding the body: %w", err)
	}
	return nil
}

func (bq MarkCompleteRequest) Build(host string) (*http.Request, error) {
	uri := "/mark-complete"
	body := bytes.NewBuffer([]byte{})
	if err := json.NewEncoder(body).Encode(bq); err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("PATCH", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", "application/json")
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *MarkCompleteRequest) Parse(rq *http.Request) error {
	if !strings.HasPrefix(rq.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rq.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rq.Body).Decode(bq); err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}

func (bq MarkCompleteRequest) Validate() (issues map[string]any) {
	issues = map[string]any{}
	if issue := bq.Completion.Validate(); issue != nil {
		issues["completion"] = issue
	}
	if issue := bq.Subject.Validate(); issue != nil {
		issues["subject"] = issue
	}
	return
}

func (bs MarkCompleteResponse) Write(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(w).Encode(bs); err != nil {
		return fmt.Errorf("encoding the body: %w", err)
	}
	return nil
}

func (bs *MarkCompleteResponse) Parse(rs *http.Response) error {
	if !strings.HasPrefix(rs.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rs.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rs.Body).Decode(bs); err != nil {
		return fmt.Errorf("decoding the body: %w", err)
	}
	return nil
}

func (bq ReattachObjectiveRequest) Build(host string) (*http.Request, error) {
	uri := "/reattach-objective"
	body := bytes.NewBuffer([]byte{})
	if err := json.NewEncoder(body).Encode(bq); err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("PATCH", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", "application/json")
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *ReattachObjectiveRequest) Parse(rq *http.Request) error {
	if !strings.HasPrefix(rq.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rq.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rq.Body).Decode(bq); err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}

func (bq ReattachObjectiveRequest) Validate() (issues map[string]any) {
	issues = map[string]any{}
	if issue := bq.CurrentParent.Validate(); issue != nil {
		issues["current-parent"] = issue
	}
	if issue := bq.NextParent.Validate(); issue != nil {
		issues["new-parent"] = issue
	}
	if issue := bq.Subject.Validate(); issue != nil {
		issues["subject"] = issue
	}
	return
}

func (bs ReattachObjectiveResponse) Write(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(w).Encode(bs); err != nil {
		return fmt.Errorf("encoding the body: %w", err)
	}
	return nil
}

func (bs *ReattachObjectiveResponse) Parse(rs *http.Response) error {
	if !strings.HasPrefix(rs.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rs.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rs.Body).Decode(bs); err != nil {
		return fmt.Errorf("decoding the body: %w", err)
	}
	return nil
}
