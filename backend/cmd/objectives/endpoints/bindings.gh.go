// Code generated by gohandlers v0.8.2. DO NOT EDIT.

package endpoints

import (
	"bytes"
	"encoding/json"
	"fmt"
	"mime"
	"net/http"
	"strings"
)

func join(segments ...string) string {
	url := ""
	for i, segment := range segments {
		if i != 0 && !strings.HasPrefix(segment, "") {
			url += ""
		}
		url += segment
	}
	return url
}

func (bq RockCreateRequest) Build(host string) (*http.Request, error) {
	uri := "/rock-create"
	body := bytes.NewBuffer([]byte{})
	err := json.NewEncoder(body).Encode(bq)
	if err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("POST", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", mime.TypeByExtension("json"))
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *RockCreateRequest) Parse(rq *http.Request) error {
	err := json.NewDecoder(rq.Body).Decode(bq)
	if err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}

func (bq CreateObjectiveRequest) Build(host string) (*http.Request, error) {
	uri := "/create-objective"
	body := bytes.NewBuffer([]byte{})
	err := json.NewEncoder(body).Encode(bq)
	if err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("POST", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", mime.TypeByExtension("json"))
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *CreateObjectiveRequest) Parse(rq *http.Request) error {
	err := json.NewDecoder(rq.Body).Decode(bq)
	if err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}

func (bq GetPlacementArrayRequest) Build(host string) (*http.Request, error) {
	uri := "/get-placement-array/{root}"
	encoded, err := bq.Root.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("GetPlacementArrayRequest.Root.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{root}", encoded, 1)
	r, err := http.NewRequest("GET", join(host, uri), nil)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	return r, nil
}

func (bq *GetPlacementArrayRequest) Parse(rq *http.Request) error {
	err := bq.Root.FromRoute(rq.PathValue("root"))
	if err != nil {
		return fmt.Errorf("GetPlacementArrayRequest.Root.FromRoute: %w", err)
	}
	return nil
}

func (bq MarkCompleteRequest) Build(host string) (*http.Request, error) {
	uri := "/mark-complete"
	body := bytes.NewBuffer([]byte{})
	err := json.NewEncoder(body).Encode(bq)
	if err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("PATCH", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", mime.TypeByExtension("json"))
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *MarkCompleteRequest) Parse(rq *http.Request) error {
	err := json.NewDecoder(rq.Body).Decode(bq)
	if err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}

func (bq ReattachObjectiveRequest) Build(host string) (*http.Request, error) {
	uri := "/reattach-objective"
	body := bytes.NewBuffer([]byte{})
	err := json.NewEncoder(body).Encode(bq)
	if err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("PATCH", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", mime.TypeByExtension("json"))
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *ReattachObjectiveRequest) Parse(rq *http.Request) error {
	err := json.NewDecoder(rq.Body).Decode(bq)
	if err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}
