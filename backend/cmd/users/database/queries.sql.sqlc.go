// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"

	"logbook/models/columns"
)

const deleteUserByUid = `-- name: DeleteUserByUid :exec
UPDATE
    "user"
SET
    "deleted" = TRUE
WHERE
    "uid" = $1
`

func (q *Queries) DeleteUserByUid(ctx context.Context, uid columns.UserId) error {
	_, err := q.db.Exec(ctx, deleteUserByUid, uid)
	return err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO "user" DEFAULT
    VALUES
    RETURNING
        uid, deleted, created_at
`

func (q *Queries) InsertUser(ctx context.Context) (User, error) {
	row := q.db.QueryRow(ctx, insertUser)
	var i User
	err := row.Scan(&i.Uid, &i.Deleted, &i.CreatedAt)
	return i, err
}

const selectUserByUserId = `-- name: SelectUserByUserId :one
SELECT
    uid, deleted, created_at
FROM
    "user"
WHERE
    "uid" = $1
LIMIT 1
`

func (q *Queries) SelectUserByUserId(ctx context.Context, uid columns.UserId) (User, error) {
	row := q.db.QueryRow(ctx, selectUserByUserId, uid)
	var i User
	err := row.Scan(&i.Uid, &i.Deleted, &i.CreatedAt)
	return i, err
}
