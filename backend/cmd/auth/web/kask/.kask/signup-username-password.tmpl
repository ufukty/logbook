{{define "signup-username-password"}}
<div data-nav-handle="signup-username-password" class="story-page">
    <h2 class="title">Login information</h2>
    <h2 class="desc">Those are how we know it is you when you try to login in a new device or after a logout.</h2>

    <div class="input-fledge">
        <div class="labeled-input">
            <input id="login-username" name="login-username" type="text" autocomplete="off" autofocus="off" required>
            <label for="login-username">Login username</label>
        </div>
        <div class="direction"><span class="respond-pattern">Letters and numbers</span> are allowed to create a <span class="respond-unique">unique</span> username longer than <span class="respond-length">6 characters</span>.</div>
        <div class="privacy-notice">Login username won't be shared with other users.</div>
    </div>
    <div class="input-fledge">
        <div class="labeled-input">
            <input id="new-password" name="confirm-password" type="password" autofill="new-password" autofocus="off" required>
            <label for="new-password">Password</label>
        </div>
        <div class="direction">Use <span class="respond-length">8 or more characters</span> with a mix of <span class="respond-letters">letters</span>, <span class="respond-numbers">numbers</span> & <span class="respond-symbols">symbols</span>.</div>
        <div class="explanation">We will derive multiple keys. One is for encryption and another is for login. Choosing harder-to-guess password will improve your security significantly by both usages.</div>
        <div class="warning">Forgetting the password will result previously encrypted user data becoming unaccessable.</div>
    </div>
    <div class="input-fledge">
        <div class="labeled-input">
            <input id="confirm-password" name="confirm-password" type="password" autofill="new-password" autofocus="off" required>
            <label for="confirm-password">Password (Confirm)</label>
        </div>
        <div class="direction">Both passwords <span class="respond-pattern">should match</span> to make sure we got it right at first.</div>
    </div>

    <div class="signup-nav-buttons">
        <button type="button" class="nav-button blue" data-nav-target="signup-phone">Continue</button>
        <button type="button" class="nav-button gray" data-nav-target="back">Back</button>
    </div>
</div>

<style>
    .input-fledge.alert-unique .respond-unique,
    .input-fledge.alert-pattern .respond-pattern,
    .input-fledge.alert-length .respond-length,
    .input-fledge.alert-letters .respond-letters,
    .input-fledge.alert-numbers .respond-numbers,
    .input-fledge.alert-symbols .respond-symbols {
        color: #c93636;
        font-weight: 500;
    }
</style>

<script>
    let loginUsername = document.getElementById("login-username")
    let newPassword = document.getElementById("new-password")
    let confirmPassword = document.getElementById("confirm-password")

    /**
    * @param {boolean} cond
    * @param {HTMLElement} input
    * @param {string} alertname
    */
    function alertOnFledgeIf(cond, input, alertname) {
        if (cond) {
            input.parentElement.parentElement.classList.add(alertname)
        } else {
            input.parentElement.parentElement.classList.remove(alertname)
        }
    }

    const regLetter = /\p{L}/u;
    const regNumber = /\d/;
    const regSymbol = /[^\p{L}\d]/u;

    function validateLoginUsername() {
        const isLongEnough = loginUsername.value.length >= 6
        const hasSymbol = regSymbol.test(loginUsername.value);

        alertOnFledgeIf(!isLongEnough, loginUsername, "alert-length")
        alertOnFledgeIf(hasSymbol, loginUsername, "alert-pattern")

        return isLongEnough && !hasSymbol
    }

    function validateNewPassword() {
        const isLongEnough = newPassword.value.length >= 8
        const hasLetter = regLetter.test(newPassword.value);
        const hasNumber = regNumber.test(newPassword.value);
        const hasSymbol = regSymbol.test(newPassword.value);

        alertOnFledgeIf(!isLongEnough, newPassword, "alert-length")
        alertOnFledgeIf(!hasLetter, newPassword, "alert-letters")
        alertOnFledgeIf(!hasNumber, newPassword, "alert-numbers")
        alertOnFledgeIf(!hasSymbol, newPassword, "alert-symbols")

        validateConfirmPassword()

        return isLongEnough && hasLetter && hasNumber && hasSymbol;
    }

    function validateConfirmPassword() {
        const areSame = newPassword.value == confirmPassword.value

        alertOnFledgeIf(!areSame, confirmPassword, "alert-pattern")

        return areSame
    }

    loginUsername.addEventListener("input", validateLoginUsername)
    newPassword.addEventListener("input", validateNewPassword)
    confirmPassword.addEventListener("input", validateConfirmPassword)
</script>

{{end}}