// Code generated by gohandlers v0.37.0. DO NOT EDIT.

package sessions

import (
	"fmt"
	"logbook/cmd/sessions/endpoints"
	"net/http"
)

type Interface interface {
	Login(*endpoints.LoginRequest) (*http.Response, error)
	SaveCredentials(*endpoints.SaveCredentialsRequest) (*http.Response, error)
	WhoIs(*endpoints.WhoIsRequest) (*endpoints.WhoIsResponse, error)
}

type Mock struct {
	LoginFunc           func(*endpoints.LoginRequest) (*http.Response, error)
	SaveCredentialsFunc func(*endpoints.SaveCredentialsRequest) (*http.Response, error)
	WhoIsFunc           func(*endpoints.WhoIsRequest) (*endpoints.WhoIsResponse, error)
}

func (m *Mock) Login(bq *endpoints.LoginRequest) (*http.Response, error) {
	if m.LoginFunc == nil {
		return nil, fmt.Errorf("not implemented: Login")
	}
	return m.LoginFunc(bq)
}

func (m *Mock) SaveCredentials(bq *endpoints.SaveCredentialsRequest) (*http.Response, error) {
	if m.SaveCredentialsFunc == nil {
		return nil, fmt.Errorf("not implemented: SaveCredentials")
	}
	return m.SaveCredentialsFunc(bq)
}

func (m *Mock) WhoIs(bq *endpoints.WhoIsRequest) (*endpoints.WhoIsResponse, error) {
	if m.WhoIsFunc == nil {
		return nil, fmt.Errorf("not implemented: WhoIs")
	}
	return m.WhoIsFunc(bq)
}

type Pool interface {
	Host() (string, error)
}

type Client struct {
	p Pool
}

func NewClient(p Pool) *Client {
	return &Client{p: p}
}

func (c *Client) Login(bq *endpoints.LoginRequest) (*http.Response, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("selecting host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("building request: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("sending: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return rs, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	return rs, nil
}

func (c *Client) SaveCredentials(bq *endpoints.SaveCredentialsRequest) (*http.Response, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("selecting host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("building request: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("sending: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return rs, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	return rs, nil
}

func (c *Client) WhoIs(bq *endpoints.WhoIsRequest) (*endpoints.WhoIsResponse, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("selecting host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("building request: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("sending: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	bs := &endpoints.WhoIsResponse{}
	err = bs.Parse(rs)
	if err != nil {
		return nil, fmt.Errorf("parsing response: %w", err)
	}
	return bs, nil
}
