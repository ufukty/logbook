// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package database

import (
	"context"

	"logbook/models/columns"
)

const insertProfileInformation = `-- name: InsertProfileInformation :one
INSERT INTO "profile"("uid", "firstname", "lastname")
    VALUES ($1, $2, $3)
RETURNING
    uid, firstname, lastname, created_at
`

type InsertProfileInformationParams struct {
	Uid       columns.UserId
	Firstname columns.HumanName
	Lastname  columns.HumanName
}

func (q *Queries) InsertProfileInformation(ctx context.Context, arg InsertProfileInformationParams) (Profile, error) {
	row := q.db.QueryRow(ctx, insertProfileInformation, arg.Uid, arg.Firstname, arg.Lastname)
	var i Profile
	err := row.Scan(
		&i.Uid,
		&i.Firstname,
		&i.Lastname,
		&i.CreatedAt,
	)
	return i, err
}

const selectLatestProfileByUid = `-- name: SelectLatestProfileByUid :one
SELECT
    uid, firstname, lastname, created_at
FROM
    "profile"
WHERE
    "uid" = $1
ORDER BY
    "created_at" DESC
LIMIT 1
`

func (q *Queries) SelectLatestProfileByUid(ctx context.Context, uid columns.UserId) (Profile, error) {
	row := q.db.QueryRow(ctx, selectLatestProfileByUid, uid)
	var i Profile
	err := row.Scan(
		&i.Uid,
		&i.Firstname,
		&i.Lastname,
		&i.CreatedAt,
	)
	return i, err
}
