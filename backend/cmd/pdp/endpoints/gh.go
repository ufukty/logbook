// Code generated by gohandlers v0.34.0. DO NOT EDIT.

package endpoints

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/ufukty/gohandlers/pkg/gohandlers"
)

func (pr *Private) ListHandlers() map[string]gohandlers.HandlerInfo {
	return map[string]gohandlers.HandlerInfo{
		"OidGid": {Method: "GET", Path: "/oid-gid/{action}/{gid}/{oid}", Ref: pr.OidGid},
		"OidUid": {Method: "GET", Path: "/oid-uid/{action}/{oid}/{uid}", Ref: pr.OidUid},
	}
}

func join(segments ...string) string {
	url := ""
	for i, segment := range segments {
		if i != 0 && !strings.HasPrefix(segment, "/") {
			url += "/"
		}
		url += segment
	}
	return url
}

func (bq OidGidRequest) Build(host string) (*http.Request, error) {
	uri := "/oid-gid/{action}/{gid}/{oid}"
	encoded, err := bq.Action.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("OidGidRequest.Action.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{action}", encoded, 1)
	encoded, err = bq.Actor.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("OidGidRequest.Actor.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{gid}", encoded, 1)
	encoded, err = bq.Resource.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("OidGidRequest.Resource.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{oid}", encoded, 1)
	r, err := http.NewRequest("GET", join(host, uri), nil)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	return r, nil
}

func (bq *OidGidRequest) Parse(rq *http.Request) error {
	if err := bq.Action.FromRoute(rq.PathValue("action")); err != nil {
		return fmt.Errorf("OidGidRequest.Action.FromRoute: %w", err)
	}
	if err := bq.Actor.FromRoute(rq.PathValue("gid")); err != nil {
		return fmt.Errorf("OidGidRequest.Actor.FromRoute: %w", err)
	}
	if err := bq.Resource.FromRoute(rq.PathValue("oid")); err != nil {
		return fmt.Errorf("OidGidRequest.Resource.FromRoute: %w", err)
	}
	return nil
}

func (bq OidGidRequest) Validate() (issues map[string]any) {
	issues = map[string]any{}
	if issue := bq.Action.Validate(); issue != nil {
		issues["action"] = issue
	}
	if issue := bq.Actor.Validate(); issue != nil {
		issues["gid"] = issue
	}
	if issue := bq.Resource.Validate(); issue != nil {
		issues["oid"] = issue
	}
	return
}

func (bq OidUidRequest) Build(host string) (*http.Request, error) {
	uri := "/oid-uid/{action}/{oid}/{uid}"
	encoded, err := bq.Action.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("OidUidRequest.Action.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{action}", encoded, 1)
	encoded, err = bq.Actor.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("OidUidRequest.Actor.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{uid}", encoded, 1)
	encoded, err = bq.Resource.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("OidUidRequest.Resource.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{oid}", encoded, 1)
	r, err := http.NewRequest("GET", join(host, uri), nil)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	return r, nil
}

func (bq *OidUidRequest) Parse(rq *http.Request) error {
	if err := bq.Action.FromRoute(rq.PathValue("action")); err != nil {
		return fmt.Errorf("OidUidRequest.Action.FromRoute: %w", err)
	}
	if err := bq.Actor.FromRoute(rq.PathValue("uid")); err != nil {
		return fmt.Errorf("OidUidRequest.Actor.FromRoute: %w", err)
	}
	if err := bq.Resource.FromRoute(rq.PathValue("oid")); err != nil {
		return fmt.Errorf("OidUidRequest.Resource.FromRoute: %w", err)
	}
	return nil
}

func (bq OidUidRequest) Validate() (issues map[string]any) {
	issues = map[string]any{}
	if issue := bq.Action.Validate(); issue != nil {
		issues["action"] = issue
	}
	if issue := bq.Actor.Validate(); issue != nil {
		issues["uid"] = issue
	}
	if issue := bq.Resource.Validate(); issue != nil {
		issues["oid"] = issue
	}
	return
}
