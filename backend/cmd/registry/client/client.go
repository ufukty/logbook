// Code generated by gohandlers v0.37.0. DO NOT EDIT.

package registry

import (
	"fmt"
	"logbook/cmd/registry/endpoints"
	"net/http"
)

type Interface interface {
	ListInstances(*endpoints.ListInstancesRequest) (*endpoints.ListInstancesResponse, error)
	RecheckInstance(*endpoints.RecheckInstanceRequest) (*http.Response, error)
	RegisterInstance(*endpoints.RegisterInstanceRequest) (*endpoints.RegisterInstanceResponse, error)
}

type Mock struct {
	ListInstancesFunc    func(*endpoints.ListInstancesRequest) (*endpoints.ListInstancesResponse, error)
	RecheckInstanceFunc  func(*endpoints.RecheckInstanceRequest) (*http.Response, error)
	RegisterInstanceFunc func(*endpoints.RegisterInstanceRequest) (*endpoints.RegisterInstanceResponse, error)
}

func (m *Mock) ListInstances(bq *endpoints.ListInstancesRequest) (*endpoints.ListInstancesResponse, error) {
	if m.ListInstancesFunc == nil {
		return nil, fmt.Errorf("not implemented: ListInstances")
	}
	return m.ListInstancesFunc(bq)
}

func (m *Mock) RecheckInstance(bq *endpoints.RecheckInstanceRequest) (*http.Response, error) {
	if m.RecheckInstanceFunc == nil {
		return nil, fmt.Errorf("not implemented: RecheckInstance")
	}
	return m.RecheckInstanceFunc(bq)
}

func (m *Mock) RegisterInstance(bq *endpoints.RegisterInstanceRequest) (*endpoints.RegisterInstanceResponse, error) {
	if m.RegisterInstanceFunc == nil {
		return nil, fmt.Errorf("not implemented: RegisterInstance")
	}
	return m.RegisterInstanceFunc(bq)
}

type Pool interface {
	Host() (string, error)
}

type Client struct {
	p Pool
}

func NewClient(p Pool) *Client {
	return &Client{p: p}
}

func (c *Client) ListInstances(bq *endpoints.ListInstancesRequest) (*endpoints.ListInstancesResponse, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("selecting host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("building request: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("sending: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	bs := &endpoints.ListInstancesResponse{}
	err = bs.Parse(rs)
	if err != nil {
		return nil, fmt.Errorf("parsing response: %w", err)
	}
	return bs, nil
}

func (c *Client) RecheckInstance(bq *endpoints.RecheckInstanceRequest) (*http.Response, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("selecting host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("building request: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("sending: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return rs, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	return rs, nil
}

func (c *Client) RegisterInstance(bq *endpoints.RegisterInstanceRequest) (*endpoints.RegisterInstanceResponse, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("selecting host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("building request: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("sending: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	bs := &endpoints.RegisterInstanceResponse{}
	err = bs.Parse(rs)
	if err != nil {
		return nil, fmt.Errorf("parsing response: %w", err)
	}
	return bs, nil
}
