// Code generated by gohandlers v0.37.0. DO NOT EDIT.

package groups

import (
	"fmt"
	"logbook/cmd/groups/endpoints"
	"net/http"
)

type Interface interface {
	CheckMembership(*endpoints.CheckMembershipRequest) (*endpoints.CheckMembershipResponse, error)
	CheckMembershipEventual(*endpoints.CheckMembershipEventualRequest) (*endpoints.CheckMembershipEventualResponse, error)
	CreateGroup(*endpoints.CreateGroupRequest) (*endpoints.CreateGroupResponse, error)
	InviteMembers(*endpoints.InviteMembersRequest) (*http.Response, error)
	RespondToGroupInvite(*endpoints.RespondToGroupInviteRequest) (*http.Response, error)
	RespondToUserInvite(*endpoints.RespondToUserInviteRequest) (*http.Response, error)
}

type Mock struct {
	CheckMembershipEventualFunc func(*endpoints.CheckMembershipEventualRequest) (*endpoints.CheckMembershipEventualResponse, error)
	CheckMembershipFunc         func(*endpoints.CheckMembershipRequest) (*endpoints.CheckMembershipResponse, error)
	CreateGroupFunc             func(*endpoints.CreateGroupRequest) (*endpoints.CreateGroupResponse, error)
	InviteMembersFunc           func(*endpoints.InviteMembersRequest) (*http.Response, error)
	RespondToGroupInviteFunc    func(*endpoints.RespondToGroupInviteRequest) (*http.Response, error)
	RespondToUserInviteFunc     func(*endpoints.RespondToUserInviteRequest) (*http.Response, error)
}

func (m *Mock) CheckMembership(bq *endpoints.CheckMembershipRequest) (*endpoints.CheckMembershipResponse, error) {
	if m.CheckMembershipFunc == nil {
		return nil, fmt.Errorf("not implemented: CheckMembership")
	}
	return m.CheckMembershipFunc(bq)
}

func (m *Mock) CheckMembershipEventual(bq *endpoints.CheckMembershipEventualRequest) (*endpoints.CheckMembershipEventualResponse, error) {
	if m.CheckMembershipEventualFunc == nil {
		return nil, fmt.Errorf("not implemented: CheckMembershipEventual")
	}
	return m.CheckMembershipEventualFunc(bq)
}

func (m *Mock) CreateGroup(bq *endpoints.CreateGroupRequest) (*endpoints.CreateGroupResponse, error) {
	if m.CreateGroupFunc == nil {
		return nil, fmt.Errorf("not implemented: CreateGroup")
	}
	return m.CreateGroupFunc(bq)
}

func (m *Mock) InviteMembers(bq *endpoints.InviteMembersRequest) (*http.Response, error) {
	if m.InviteMembersFunc == nil {
		return nil, fmt.Errorf("not implemented: InviteMembers")
	}
	return m.InviteMembersFunc(bq)
}

func (m *Mock) RespondToGroupInvite(bq *endpoints.RespondToGroupInviteRequest) (*http.Response, error) {
	if m.RespondToGroupInviteFunc == nil {
		return nil, fmt.Errorf("not implemented: RespondToGroupInvite")
	}
	return m.RespondToGroupInviteFunc(bq)
}

func (m *Mock) RespondToUserInvite(bq *endpoints.RespondToUserInviteRequest) (*http.Response, error) {
	if m.RespondToUserInviteFunc == nil {
		return nil, fmt.Errorf("not implemented: RespondToUserInvite")
	}
	return m.RespondToUserInviteFunc(bq)
}

type Pool interface {
	Host() (string, error)
}

type Client struct {
	p Pool
}

func NewClient(p Pool) *Client {
	return &Client{p: p}
}

func (c *Client) CheckMembership(bq *endpoints.CheckMembershipRequest) (*endpoints.CheckMembershipResponse, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("selecting host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("building request: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("sending: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	bs := &endpoints.CheckMembershipResponse{}
	err = bs.Parse(rs)
	if err != nil {
		return nil, fmt.Errorf("parsing response: %w", err)
	}
	return bs, nil
}

func (c *Client) CheckMembershipEventual(bq *endpoints.CheckMembershipEventualRequest) (*endpoints.CheckMembershipEventualResponse, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("selecting host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("building request: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("sending: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	bs := &endpoints.CheckMembershipEventualResponse{}
	err = bs.Parse(rs)
	if err != nil {
		return nil, fmt.Errorf("parsing response: %w", err)
	}
	return bs, nil
}

func (c *Client) CreateGroup(bq *endpoints.CreateGroupRequest) (*endpoints.CreateGroupResponse, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("selecting host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("building request: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("sending: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	bs := &endpoints.CreateGroupResponse{}
	err = bs.Parse(rs)
	if err != nil {
		return nil, fmt.Errorf("parsing response: %w", err)
	}
	return bs, nil
}

func (c *Client) InviteMembers(bq *endpoints.InviteMembersRequest) (*http.Response, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("selecting host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("building request: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("sending: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return rs, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	return rs, nil
}

func (c *Client) RespondToGroupInvite(bq *endpoints.RespondToGroupInviteRequest) (*http.Response, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("selecting host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("building request: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("sending: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return rs, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	return rs, nil
}

func (c *Client) RespondToUserInvite(bq *endpoints.RespondToUserInviteRequest) (*http.Response, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("selecting host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("building request: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("sending: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return rs, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	return rs, nil
}
