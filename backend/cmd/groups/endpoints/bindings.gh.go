// Code generated by gohandlers v0.14.1. DO NOT EDIT.

package endpoints

import (
	"bytes"
	"encoding/json"
	"fmt"
	"mime"
	"net/http"
	"strings"
)

func join(segments ...string) string {
	url := ""
	for i, segment := range segments {
		if i != 0 && !strings.HasPrefix(segment, "/") {
			url += "/"
		}
		url += segment
	}
	return url
}

func (bq CheckMembershipRequest) Build(host string) (*http.Request, error) {
	uri := "/check-membership/{gid}/{uid}"
	encoded, err := bq.Gid.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("CheckMembershipRequest.Gid.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{gid}", encoded, 1)
	encoded, err = bq.Uid.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("CheckMembershipRequest.Uid.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{uid}", encoded, 1)
	r, err := http.NewRequest("GET", join(host, uri), nil)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	return r, nil
}

func (bq *CheckMembershipRequest) Parse(rq *http.Request) error {
	err := bq.Gid.FromRoute(rq.PathValue("gid"))
	if err != nil {
		return fmt.Errorf("CheckMembershipRequest.Gid.FromRoute: %w", err)
	}
	err = bq.Uid.FromRoute(rq.PathValue("uid"))
	if err != nil {
		return fmt.Errorf("CheckMembershipRequest.Uid.FromRoute: %w", err)
	}
	return nil
}

func (bs CheckMembershipResponse) Write(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", mime.TypeByExtension(".json"))
	w.WriteHeader(http.StatusOK)
	err := json.NewEncoder(w).Encode(bs)
	if err != nil {
		return fmt.Errorf("encoding the body: %w", err)
	}
	return nil
}

func (bs *CheckMembershipResponse) Parse(rs *http.Response) error {
	ct := rs.Header.Get("Content-Type")
	if ct != mime.TypeByExtension(".json") {
		return fmt.Errorf("unsupported Content-Type: %s", ct)
	}
	err := json.NewDecoder(rs.Body).Decode(bs)
	if err != nil {
		return fmt.Errorf("decoding the body: %w", err)
	}
	return nil
}

func (bq CheckMembershipEventualRequest) Build(host string) (*http.Request, error) {
	uri := "/check-membership-eventual/{gid}/{uid}"
	encoded, err := bq.Gid.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("CheckMembershipEventualRequest.Gid.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{gid}", encoded, 1)
	encoded, err = bq.Uid.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("CheckMembershipEventualRequest.Uid.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{uid}", encoded, 1)
	r, err := http.NewRequest("GET", join(host, uri), nil)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	return r, nil
}

func (bq *CheckMembershipEventualRequest) Parse(rq *http.Request) error {
	err := bq.Gid.FromRoute(rq.PathValue("gid"))
	if err != nil {
		return fmt.Errorf("CheckMembershipEventualRequest.Gid.FromRoute: %w", err)
	}
	err = bq.Uid.FromRoute(rq.PathValue("uid"))
	if err != nil {
		return fmt.Errorf("CheckMembershipEventualRequest.Uid.FromRoute: %w", err)
	}
	return nil
}

func (bs CheckMembershipEventualResponse) Write(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", mime.TypeByExtension(".json"))
	w.WriteHeader(http.StatusOK)
	err := json.NewEncoder(w).Encode(bs)
	if err != nil {
		return fmt.Errorf("encoding the body: %w", err)
	}
	return nil
}

func (bs *CheckMembershipEventualResponse) Parse(rs *http.Response) error {
	ct := rs.Header.Get("Content-Type")
	if ct != mime.TypeByExtension(".json") {
		return fmt.Errorf("unsupported Content-Type: %s", ct)
	}
	err := json.NewDecoder(rs.Body).Decode(bs)
	if err != nil {
		return fmt.Errorf("decoding the body: %w", err)
	}
	return nil
}

func (bq CreateGroupRequest) Build(host string) (*http.Request, error) {
	uri := "/create-group"
	body := bytes.NewBuffer([]byte{})
	err := json.NewEncoder(body).Encode(bq)
	if err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("POST", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", mime.TypeByExtension(".json"))
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *CreateGroupRequest) Parse(rq *http.Request) error {
	err := json.NewDecoder(rq.Body).Decode(bq)
	if err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}

func (bs CreateGroupResponse) Write(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", mime.TypeByExtension(".json"))
	w.WriteHeader(http.StatusOK)
	err := json.NewEncoder(w).Encode(bs)
	if err != nil {
		return fmt.Errorf("encoding the body: %w", err)
	}
	return nil
}

func (bs *CreateGroupResponse) Parse(rs *http.Response) error {
	ct := rs.Header.Get("Content-Type")
	if ct != mime.TypeByExtension(".json") {
		return fmt.Errorf("unsupported Content-Type: %s", ct)
	}
	err := json.NewDecoder(rs.Body).Decode(bs)
	if err != nil {
		return fmt.Errorf("decoding the body: %w", err)
	}
	return nil
}

func (bq DelegateObjectiveRequest) Build(host string) (*http.Request, error) {
	uri := "/delegate-objective"
	body := bytes.NewBuffer([]byte{})
	err := json.NewEncoder(body).Encode(bq)
	if err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("POST", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", mime.TypeByExtension(".json"))
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *DelegateObjectiveRequest) Parse(rq *http.Request) error {
	err := json.NewDecoder(rq.Body).Decode(bq)
	if err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}

func (bs DelegateObjectiveResponse) Write(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", mime.TypeByExtension(".json"))
	w.WriteHeader(http.StatusOK)
	err := json.NewEncoder(w).Encode(bs)
	if err != nil {
		return fmt.Errorf("encoding the body: %w", err)
	}
	return nil
}

func (bs *DelegateObjectiveResponse) Parse(rs *http.Response) error {
	ct := rs.Header.Get("Content-Type")
	if ct != mime.TypeByExtension(".json") {
		return fmt.Errorf("unsupported Content-Type: %s", ct)
	}
	err := json.NewDecoder(rs.Body).Decode(bs)
	if err != nil {
		return fmt.Errorf("decoding the body: %w", err)
	}
	return nil
}

func (bq InviteCollaboratorsRequest) Build(host string) (*http.Request, error) {
	uri := "/invite-collaborators"
	body := bytes.NewBuffer([]byte{})
	err := json.NewEncoder(body).Encode(bq)
	if err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("POST", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", mime.TypeByExtension(".json"))
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *InviteCollaboratorsRequest) Parse(rq *http.Request) error {
	err := json.NewDecoder(rq.Body).Decode(bq)
	if err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}

func (bq ListDelegationChainRequest) Build(host string) (*http.Request, error) {
	uri := "/list-delegation-chain/{subject}"
	encoded, err := bq.Subject.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("ListDelegationChainRequest.Subject.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{subject}", encoded, 1)
	r, err := http.NewRequest("GET", join(host, uri), nil)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	return r, nil
}

func (bq *ListDelegationChainRequest) Parse(rq *http.Request) error {
	err := bq.Subject.FromRoute(rq.PathValue("subject"))
	if err != nil {
		return fmt.Errorf("ListDelegationChainRequest.Subject.FromRoute: %w", err)
	}
	return nil
}

func (bq RemoveDelegationRequest) Build(host string) (*http.Request, error) {
	uri := "/remove-delegation"
	body := bytes.NewBuffer([]byte{})
	err := json.NewEncoder(body).Encode(bq)
	if err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("POST", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", mime.TypeByExtension(".json"))
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *RemoveDelegationRequest) Parse(rq *http.Request) error {
	err := json.NewDecoder(rq.Body).Decode(bq)
	if err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}

func (bq RespondToInviteRequest) Build(host string) (*http.Request, error) {
	uri := "/respond-to-invite"
	body := bytes.NewBuffer([]byte{})
	err := json.NewEncoder(body).Encode(bq)
	if err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("POST", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", mime.TypeByExtension(".json"))
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *RespondToInviteRequest) Parse(rq *http.Request) error {
	err := json.NewDecoder(rq.Body).Decode(bq)
	if err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}
