// Code generated by gohandlers v0.27.3. DO NOT EDIT.

package endpoints

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
)

func join(segments ...string) string {
	url := ""
	for i, segment := range segments {
		if i != 0 && !strings.HasPrefix(segment, "/") {
			url += "/"
		}
		url += segment
	}
	return url
}

func (bq CheckMembershipRequest) Build(host string) (*http.Request, error) {
	uri := "/check-membership/{gid}/{uid}"
	encoded, err := bq.Gid.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("CheckMembershipRequest.Gid.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{gid}", encoded, 1)
	encoded, err = bq.Uid.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("CheckMembershipRequest.Uid.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{uid}", encoded, 1)
	r, err := http.NewRequest("GET", join(host, uri), nil)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	return r, nil
}

func (bq *CheckMembershipRequest) Parse(rq *http.Request) error {
	if err := bq.Gid.FromRoute(rq.PathValue("gid")); err != nil {
		return fmt.Errorf("CheckMembershipRequest.Gid.FromRoute: %w", err)
	}
	if err := bq.Uid.FromRoute(rq.PathValue("uid")); err != nil {
		return fmt.Errorf("CheckMembershipRequest.Uid.FromRoute: %w", err)
	}
	return nil
}

func (bs CheckMembershipResponse) Write(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(w).Encode(bs); err != nil {
		return fmt.Errorf("encoding the body: %w", err)
	}
	return nil
}

func (bs *CheckMembershipResponse) Parse(rs *http.Response) error {
	if !strings.HasPrefix(rs.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rs.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rs.Body).Decode(bs); err != nil {
		return fmt.Errorf("decoding the body: %w", err)
	}
	return nil
}

func (bq CheckMembershipEventualRequest) Build(host string) (*http.Request, error) {
	uri := "/check-membership-eventual/{gid}/{uid}"
	encoded, err := bq.Gid.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("CheckMembershipEventualRequest.Gid.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{gid}", encoded, 1)
	encoded, err = bq.Uid.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("CheckMembershipEventualRequest.Uid.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{uid}", encoded, 1)
	r, err := http.NewRequest("GET", join(host, uri), nil)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	return r, nil
}

func (bq *CheckMembershipEventualRequest) Parse(rq *http.Request) error {
	if err := bq.Gid.FromRoute(rq.PathValue("gid")); err != nil {
		return fmt.Errorf("CheckMembershipEventualRequest.Gid.FromRoute: %w", err)
	}
	if err := bq.Uid.FromRoute(rq.PathValue("uid")); err != nil {
		return fmt.Errorf("CheckMembershipEventualRequest.Uid.FromRoute: %w", err)
	}
	return nil
}

func (bs CheckMembershipEventualResponse) Write(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(w).Encode(bs); err != nil {
		return fmt.Errorf("encoding the body: %w", err)
	}
	return nil
}

func (bs *CheckMembershipEventualResponse) Parse(rs *http.Response) error {
	if !strings.HasPrefix(rs.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rs.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rs.Body).Decode(bs); err != nil {
		return fmt.Errorf("decoding the body: %w", err)
	}
	return nil
}

func (bq CreateGroupRequest) Build(host string) (*http.Request, error) {
	uri := "/create-group"
	body := bytes.NewBuffer([]byte{})
	if err := json.NewEncoder(body).Encode(bq); err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("POST", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", "application/json")
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *CreateGroupRequest) Parse(rq *http.Request) error {
	if !strings.HasPrefix(rq.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rq.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rq.Body).Decode(bq); err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}

func (bs CreateGroupResponse) Write(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(w).Encode(bs); err != nil {
		return fmt.Errorf("encoding the body: %w", err)
	}
	return nil
}

func (bs *CreateGroupResponse) Parse(rs *http.Response) error {
	if !strings.HasPrefix(rs.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rs.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rs.Body).Decode(bs); err != nil {
		return fmt.Errorf("decoding the body: %w", err)
	}
	return nil
}

func (bq InviteMembersRequest) Build(host string) (*http.Request, error) {
	uri := "/invite-members/{gid}"
	encoded, err := bq.Gid.ToRoute()
	if err != nil {
		return nil, fmt.Errorf("InviteMembersRequest.Gid.ToRoute: %w", err)
	}
	uri = strings.Replace(uri, "{gid}", encoded, 1)
	body := bytes.NewBuffer([]byte{})
	if err = json.NewEncoder(body).Encode(bq); err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("POST", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", "application/json")
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *InviteMembersRequest) Parse(rq *http.Request) error {
	if !strings.HasPrefix(rq.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rq.Header.Get("Content-Type"))
	}
	if err := bq.Gid.FromRoute(rq.PathValue("gid")); err != nil {
		return fmt.Errorf("InviteMembersRequest.Gid.FromRoute: %w", err)
	}
	if err := json.NewDecoder(rq.Body).Decode(bq); err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}

func (bq RespondToGroupInviteRequest) Build(host string) (*http.Request, error) {
	uri := "/respond-to-group-invite"
	body := bytes.NewBuffer([]byte{})
	if err := json.NewEncoder(body).Encode(bq); err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("POST", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", "application/json")
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *RespondToGroupInviteRequest) Parse(rq *http.Request) error {
	if !strings.HasPrefix(rq.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rq.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rq.Body).Decode(bq); err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}

func (bq RespondToUserInviteRequest) Build(host string) (*http.Request, error) {
	uri := "/respond-to-user-invite"
	body := bytes.NewBuffer([]byte{})
	if err := json.NewEncoder(body).Encode(bq); err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("POST", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", "application/json")
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *RespondToUserInviteRequest) Parse(rq *http.Request) error {
	if !strings.HasPrefix(rq.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rq.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rq.Body).Decode(bq); err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}
