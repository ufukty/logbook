// Code generated by gohandlers v0.37.0. DO NOT EDIT.

package registration

import (
	"fmt"
	"logbook/cmd/registration/endpoints"
	"net/http"
)

type Interface interface {
	CreateAccount(*endpoints.CreateAccountRequest) (*http.Response, error)
	CreateEmailGrant(*endpoints.CreateEmailGrantRequest) (*endpoints.CreateEmailGrantResponse, error)
	CreatePasswordGrant(*endpoints.CreatePasswordGrantRequest) (*endpoints.CreatePasswordGrantResponse, error)
	CreatePhoneGrant(*endpoints.CreatePhoneGrantRequest) (*endpoints.CreatePhoneGrantResponse, error)
}

type Mock struct {
	CreateAccountFunc       func(*endpoints.CreateAccountRequest) (*http.Response, error)
	CreateEmailGrantFunc    func(*endpoints.CreateEmailGrantRequest) (*endpoints.CreateEmailGrantResponse, error)
	CreatePasswordGrantFunc func(*endpoints.CreatePasswordGrantRequest) (*endpoints.CreatePasswordGrantResponse, error)
	CreatePhoneGrantFunc    func(*endpoints.CreatePhoneGrantRequest) (*endpoints.CreatePhoneGrantResponse, error)
}

func (m *Mock) CreateAccount(bq *endpoints.CreateAccountRequest) (*http.Response, error) {
	if m.CreateAccountFunc == nil {
		return nil, fmt.Errorf("not implemented: CreateAccount")
	}
	return m.CreateAccountFunc(bq)
}

func (m *Mock) CreateEmailGrant(bq *endpoints.CreateEmailGrantRequest) (*endpoints.CreateEmailGrantResponse, error) {
	if m.CreateEmailGrantFunc == nil {
		return nil, fmt.Errorf("not implemented: CreateEmailGrant")
	}
	return m.CreateEmailGrantFunc(bq)
}

func (m *Mock) CreatePasswordGrant(bq *endpoints.CreatePasswordGrantRequest) (*endpoints.CreatePasswordGrantResponse, error) {
	if m.CreatePasswordGrantFunc == nil {
		return nil, fmt.Errorf("not implemented: CreatePasswordGrant")
	}
	return m.CreatePasswordGrantFunc(bq)
}

func (m *Mock) CreatePhoneGrant(bq *endpoints.CreatePhoneGrantRequest) (*endpoints.CreatePhoneGrantResponse, error) {
	if m.CreatePhoneGrantFunc == nil {
		return nil, fmt.Errorf("not implemented: CreatePhoneGrant")
	}
	return m.CreatePhoneGrantFunc(bq)
}

type Pool interface {
	Host() (string, error)
}

type Client struct {
	p Pool
}

func NewClient(p Pool) *Client {
	return &Client{p: p}
}

func (c *Client) CreateAccount(bq *endpoints.CreateAccountRequest) (*http.Response, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("selecting host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("building request: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("sending: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return rs, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	return rs, nil
}

func (c *Client) CreateEmailGrant(bq *endpoints.CreateEmailGrantRequest) (*endpoints.CreateEmailGrantResponse, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("selecting host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("building request: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("sending: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	bs := &endpoints.CreateEmailGrantResponse{}
	err = bs.Parse(rs)
	if err != nil {
		return nil, fmt.Errorf("parsing response: %w", err)
	}
	return bs, nil
}

func (c *Client) CreatePasswordGrant(bq *endpoints.CreatePasswordGrantRequest) (*endpoints.CreatePasswordGrantResponse, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("selecting host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("building request: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("sending: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	bs := &endpoints.CreatePasswordGrantResponse{}
	err = bs.Parse(rs)
	if err != nil {
		return nil, fmt.Errorf("parsing response: %w", err)
	}
	return bs, nil
}

func (c *Client) CreatePhoneGrant(bq *endpoints.CreatePhoneGrantRequest) (*endpoints.CreatePhoneGrantResponse, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("selecting host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("building request: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("sending: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	bs := &endpoints.CreatePhoneGrantResponse{}
	err = bs.Parse(rs)
	if err != nil {
		return nil, fmt.Errorf("parsing response: %w", err)
	}
	return bs, nil
}
