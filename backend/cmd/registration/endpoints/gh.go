// Code generated by gohandlers v0.37.0. DO NOT EDIT.

package endpoints

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"strings"

	"github.com/ufukty/gohandlers/pkg/gohandlers"
)

func (pu *Public) ListHandlers() map[string]gohandlers.HandlerInfo {
	return map[string]gohandlers.HandlerInfo{
		"CreateAccount":       {Method: "POST", Path: "/create-account", Ref: pu.CreateAccount},
		"CreateEmailGrant":    {Method: "POST", Path: "/create-email-grant", Ref: pu.CreateEmailGrant},
		"CreatePasswordGrant": {Method: "POST", Path: "/create-password-grant", Ref: pu.CreatePasswordGrant},
		"CreatePhoneGrant":    {Method: "POST", Path: "/create-phone-grant", Ref: pu.CreatePhoneGrant},
	}
}

func join(segments ...string) string {
	url := ""
	for i, segment := range segments {
		if i != 0 && !strings.HasPrefix(segment, "/") {
			url += "/"
		}
		url += segment
	}
	return url
}

func (bq CreateAccountRequest) Build(host string) (*http.Request, error) {
	uri := "/create-account"
	body := bytes.NewBuffer([]byte{})
	if err := json.NewEncoder(body).Encode(bq); err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("POST", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", "application/json")
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *CreateAccountRequest) Parse(rq *http.Request) error {
	if !strings.HasPrefix(rq.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rq.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rq.Body).Decode(bq); err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}

func (bq CreateAccountRequest) Validate() (issues map[string]any) {
	issues = map[string]any{}
	if issue := bq.AntiCsrfToken.Validate(); issue != nil {
		issues["acsrft"] = issue
	}
	if issue := bq.Birthday.Validate(); issue != nil {
		issues["birthday"] = issue
	}
	if issue := bq.Country.Validate(); issue != nil {
		issues["country"] = issue
	}
	if issue := bq.EmailGrant.Validate(); issue != nil {
		issues["email-grant"] = issue
	}
	if issue := bq.Firstname.Validate(); issue != nil {
		issues["firstname"] = issue
	}
	if issue := bq.Lastname.Validate(); issue != nil {
		issues["lastname"] = issue
	}
	if issue := bq.PasswordGrant.Validate(); issue != nil {
		issues["password-grant"] = issue
	}
	if issue := bq.PhoneGrant.Validate(); issue != nil {
		issues["phone-grant"] = issue
	}
	return
}

func (bq CreateEmailGrantRequest) Build(host string) (*http.Request, error) {
	uri := "/create-email-grant"
	body := bytes.NewBuffer([]byte{})
	if err := json.NewEncoder(body).Encode(bq); err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("POST", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", "application/json")
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *CreateEmailGrantRequest) Parse(rq *http.Request) error {
	if !strings.HasPrefix(rq.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rq.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rq.Body).Decode(bq); err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}

func (bq CreateEmailGrantRequest) Validate() (issues map[string]any) {
	issues = map[string]any{}
	if issue := bq.AntiCsrfToken.Validate(); issue != nil {
		issues["acsrft"] = issue
	}
	if issue := bq.Email.Validate(); issue != nil {
		issues["email"] = issue
	}
	return
}

func (bs CreateEmailGrantResponse) Write(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(w).Encode(bs); err != nil {
		return fmt.Errorf("encoding the body: %w", err)
	}
	return nil
}

func (bs *CreateEmailGrantResponse) Parse(rs *http.Response) error {
	if !strings.HasPrefix(rs.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rs.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rs.Body).Decode(bs); err != nil {
		return fmt.Errorf("decoding the body: %w", err)
	}
	return nil
}

func (bq CreatePasswordGrantRequest) Build(host string) (*http.Request, error) {
	uri := "/create-password-grant"
	body := bytes.NewBuffer([]byte{})
	if err := json.NewEncoder(body).Encode(bq); err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("POST", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", "application/json")
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *CreatePasswordGrantRequest) Parse(rq *http.Request) error {
	if !strings.HasPrefix(rq.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rq.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rq.Body).Decode(bq); err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}

func (bq CreatePasswordGrantRequest) Validate() (issues map[string]any) {
	issues = map[string]any{}
	if issue := bq.AntiCsrfToken.Validate(); issue != nil {
		issues["acsrft"] = issue
	}
	if issue := bq.Password.Validate(); issue != nil {
		issues["password"] = issue
	}
	return
}

func (bs CreatePasswordGrantResponse) Write(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(w).Encode(bs); err != nil {
		return fmt.Errorf("encoding the body: %w", err)
	}
	return nil
}

func (bs *CreatePasswordGrantResponse) Parse(rs *http.Response) error {
	if !strings.HasPrefix(rs.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rs.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rs.Body).Decode(bs); err != nil {
		return fmt.Errorf("decoding the body: %w", err)
	}
	return nil
}

func (bq CreatePhoneGrantRequest) Build(host string) (*http.Request, error) {
	uri := "/create-phone-grant"
	body := bytes.NewBuffer([]byte{})
	if err := json.NewEncoder(body).Encode(bq); err != nil {
		return nil, fmt.Errorf("json.Encoder.Encode: %w", err)
	}
	r, err := http.NewRequest("POST", join(host, uri), body)
	if err != nil {
		return nil, fmt.Errorf("http.NewRequest: %w", err)
	}
	r.Header.Set("Content-Type", "application/json")
	r.Header.Set("Content-Length", fmt.Sprintf("%d", body.Len()))
	return r, nil
}

func (bq *CreatePhoneGrantRequest) Parse(rq *http.Request) error {
	if !strings.HasPrefix(rq.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rq.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rq.Body).Decode(bq); err != nil {
		return fmt.Errorf("decoding body: %w", err)
	}
	return nil
}

func (bq CreatePhoneGrantRequest) Validate() (issues map[string]any) {
	issues = map[string]any{}
	if issue := bq.AntiCsrfToken.Validate(); issue != nil {
		issues["acsrft"] = issue
	}
	if issue := bq.Phone.Validate(); issue != nil {
		issues["phone"] = issue
	}
	return
}

func (bs CreatePhoneGrantResponse) Write(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(w).Encode(bs); err != nil {
		return fmt.Errorf("encoding the body: %w", err)
	}
	return nil
}

func (bs *CreatePhoneGrantResponse) Parse(rs *http.Response) error {
	if !strings.HasPrefix(rs.Header.Get("Content-Type"), "application/json") {
		return fmt.Errorf("invalid content type for request: %s", rs.Header.Get("Content-Type"))
	}
	if err := json.NewDecoder(rs.Body).Decode(bs); err != nil {
		return fmt.Errorf("decoding the body: %w", err)
	}
	return nil
}
