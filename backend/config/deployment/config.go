// Code generated by gonfique. DO NOT EDIT.

package deployment

import (
	"fmt"
	"gopkg.in/yaml.v3"
	"os"
	"time"
)

type Router struct {
	GracePeriod    time.Duration `yaml:"grace-period"`
	IdleTimeout    time.Duration `yaml:"idle-timeout"`
	ReadTimeout    time.Duration `yaml:"read-timeout"`
	RequestTimeout time.Duration `yaml:"request-timeout"`
	WriteTimeout   time.Duration `yaml:"write-timeout"`
}
type Config struct {
	Ports struct {
		Accounts   int `yaml:"accounts"`
		Gateway    int `yaml:"gateway"`
		Internal   int `yaml:"internal"`
		Objectives int `yaml:"objectives"`
		Registry   int `yaml:"registry"`
		Tags       int `yaml:"tags"`
	} `yaml:"ports"`
	Registry struct {
		ClearanceDelay  time.Duration `yaml:"clearance-delay"`
		ClearancePeriod time.Duration `yaml:"clearance-period"`
		InstanceTimeout time.Duration `yaml:"instance-timeout"`
	} `yaml:"registry"`
	RegistryFile struct {
		UpdatePeriod time.Duration `yaml:"update-period"`
	} `yaml:"registry-file"`
	Router  Router `yaml:"router"`
	Sidecar struct {
		QueryingTickerDelay   time.Duration `yaml:"querying-ticker-delay"`
		QueryingTickerPeriod  time.Duration `yaml:"querying-ticker-period"`
		RechekingTickerDelay  time.Duration `yaml:"recheking-ticker-delay"`
		RechekingTickerPeriod time.Duration `yaml:"recheking-ticker-period"`
	} `yaml:"sidecar"`
}

func ReadConfig(path string) (*Config, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, fmt.Errorf("opening config file: %w", err)
	}
	defer file.Close()
	c := &Config{}
	err = yaml.NewDecoder(file).Decode(c)
	if err != nil {
		return nil, fmt.Errorf("decoding config file: %w", err)
	}
	return c, nil
}
