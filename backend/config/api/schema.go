// Code generated by gonfique. DO NOT EDIT.

package api

import (
	"fmt"
	"gopkg.in/yaml.v3"
	"os"
)

func (a ApiGateway) Range() map[string]Services {
	return map[string]Services{"services": a.Services}
}
func (g GroupsPrivate) Range() map[string]Endpoint {
	return map[string]Endpoint{"group_members_check": g.GroupMembersCheck, "group_members_check_eventual": g.GroupMembersCheckEventual, "group_members_list": g.GroupMembersList}
}
func (g GroupsPublic) Range() map[string]Endpoint {
	return map[string]Endpoint{"group_create": g.GroupCreate, "group_members_list": g.GroupMembersList}
}
func (i InternalGateway) Range() map[string]InternalGatewayServices {
	return map[string]InternalGatewayServices{"services": i.Services}
}
func (i InternalGatewayServices) Range() map[string]string {
	return map[string]string{"registry": i.Registry}
}
func (o ObjectivesPrivate) Range() map[string]Endpoint {
	return map[string]Endpoint{"rock-create": o.RockCreate}
}
func (o ObjectivesPublic) Range() map[string]Endpoint {
	return map[string]Endpoint{"attach": o.Attach, "create": o.Create, "delete": o.Delete, "mark": o.Mark, "placement": o.Placement}
}
func (p Private) Range() map[string]Endpoint {
	return map[string]Endpoint{"who-is": p.WhoIs}
}
func (p Public) Range() map[string]Endpoint {
	return map[string]Endpoint{"create_account": p.CreateAccount, "create_profile": p.CreateProfile, "login": p.Login, "logout": p.Logout, "register": p.Register, "reserve_username": p.ReserveUsername, "totp": p.Totp, "verify_email": p.VerifyEmail, "verify_phone": p.VerifyPhone, "whoami": p.Whoami}
}
func (r Registry) Range() map[string]RegistryPrivate {
	return map[string]RegistryPrivate{"private": r.Private}
}
func (r RegistryPrivate) Range() map[string]Endpoint {
	return map[string]Endpoint{"list-instances": r.ListInstances, "recheck-instance": r.RecheckInstance, "register-instance": r.RegisterInstance}
}
func (s Services) Range() map[string]string {
	return map[string]string{"account": s.Account, "groups": s.Groups, "objectives": s.Objectives, "tags": s.Tags}
}
func (t Tags) Range() map[string]TagsPublic {
	return map[string]TagsPublic{"public": t.Public}
}
func (t TagsPublic) Range() map[string]Endpoint {
	return map[string]Endpoint{"assign": t.Assign, "creation": t.Creation}
}

type Account struct {
	Private Private `yaml:"private"`
	Public  Public  `yaml:"public"`
}
type ApiGateway struct {
	Services Services `yaml:"services"`
}
type Groups struct {
	Private GroupsPrivate `yaml:"private"`
	Public  GroupsPublic  `yaml:"public"`
}
type GroupsPrivate struct {
	GroupMembersCheck         Endpoint `yaml:"group_members_check"`
	GroupMembersCheckEventual Endpoint `yaml:"group_members_check_eventual"`
	GroupMembersList          Endpoint `yaml:"group_members_list"`
}
type GroupsPublic struct {
	GroupCreate      Endpoint `yaml:"group_create"`
	GroupMembersList Endpoint `yaml:"group_members_list"`
}
type InternalGateway struct {
	Services InternalGatewayServices `yaml:"services"`
}
type InternalGatewayServices struct {
	Registry string `yaml:"registry"`
}
type Objectives struct {
	Private ObjectivesPrivate `yaml:"private"`
	Public  ObjectivesPublic  `yaml:"public"`
}
type ObjectivesPrivate struct {
	RockCreate Endpoint `yaml:"rock-create"`
}
type ObjectivesPublic struct {
	Attach    Endpoint `yaml:"attach"`
	Create    Endpoint `yaml:"create"`
	Delete    Endpoint `yaml:"delete"`
	Mark      Endpoint `yaml:"mark"`
	Placement Endpoint `yaml:"placement"`
}
type Private struct {
	WhoIs Endpoint `yaml:"who-is"`
}
type Public struct {
	CreateAccount   Endpoint `yaml:"create_account"`
	CreateProfile   Endpoint `yaml:"create_profile"`
	Login           Endpoint `yaml:"login"`
	Logout          Endpoint `yaml:"logout"`
	Register        Endpoint `yaml:"register"`
	ReserveUsername Endpoint `yaml:"reserve_username"`
	Totp            Endpoint `yaml:"totp"`
	VerifyEmail     Endpoint `yaml:"verify_email"`
	VerifyPhone     Endpoint `yaml:"verify_phone"`
	Whoami          Endpoint `yaml:"whoami"`
}
type Registry struct {
	Private RegistryPrivate `yaml:"private"`
}
type RegistryPrivate struct {
	ListInstances    Endpoint `yaml:"list-instances"`
	RecheckInstance  Endpoint `yaml:"recheck-instance"`
	RegisterInstance Endpoint `yaml:"register-instance"`
}
type Services struct {
	Account    string `yaml:"account"`
	Groups     string `yaml:"groups"`
	Objectives string `yaml:"objectives"`
	Tags       string `yaml:"tags"`
}
type Tags struct {
	Public TagsPublic `yaml:"public"`
}
type TagsPublic struct {
	Assign   Endpoint `yaml:"assign"`
	Creation Endpoint `yaml:"creation"`
}
type Config struct {
	Account         Account         `yaml:"account"`
	ApiGateway      ApiGateway      `yaml:"api-gateway"`
	Groups          Groups          `yaml:"groups"`
	InternalGateway InternalGateway `yaml:"internal-gateway"`
	Objectives      Objectives      `yaml:"objectives"`
	Registry        Registry        `yaml:"registry"`
	Tags            Tags            `yaml:"tags"`
}

func ReadConfig(path string) (*Config, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, fmt.Errorf("opening config file: %w", err)
	}
	defer file.Close()
	c := &Config{}
	err = yaml.NewDecoder(file).Decode(c)
	if err != nil {
		return nil, fmt.Errorf("decoding config file: %w", err)
	}
	return c, nil
}
