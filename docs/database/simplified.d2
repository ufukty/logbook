active: {
  shape: sql_table

  oid: ObjectiveId
  vid: VersionId
}

bookmark: {
  shape: sql_table

  uid: UserId
  oid: ObjectiveId
  vid: VersionId
  display_name: text
  is_rock: bool # rocks are hidden in the UI
  created_at: timestamp
}

privilege: {
  shape: sql_table

  user_role_id: uuid
  oid: ObjectiveId
  vid: VersionId
  uid: UserId
  role: "Owner, Supervisor, Executor, Guest"
  status: "Invited, Accepted, Rejected, Canceled"
  created_at: timestamp
  updated_at: timestamp
}

objective: {
  shape: sql_table

  oid: ObjectiveId
  vid: VersionId
  based: VersionId
  created_by: OperationId
  props: PropertyId

  created_at: timestamp # creation of this version (=row)
}

objective_view_prefs: {
  shape: sql_table

  uid: UserId
  oid: ObjectiveId
  fold: boolean
}


# cached from operations to reduce view build duration
# separately versioned from the objective to detach it from privilege and collaboration config changes
computed_props: {
  shape: sql_table

  propid: PropertyId
  content: text
  creator: UserId
  created_at: timestamp
}

links: {
  shape: sql_table

  sup_oid: ObjectiveId
  sub_oid: ObjectiveId
  sup_vid: VersionId
  sub_vid: VersionId
}

computed_to_top: {
  shape: sql_table

  oid: ObjectiveId
  vid: VersionId
  viewer: UserId

  is_solo: bool
  is_completed: bool

  index: int
  subtree_size: int
  completed_subitems: int
}

operation: {
  shape: sql_table

  opid: OperationId
  
  subjectoid: ObjectiveId
  subjectvid: VersionId
  actor: UserId

  op_type: enum
  op_status: enum

  created_at: timestamp
}

op_checkout: {
  shape: sql_table
  
  opid: OperationId 
  to: VersionId
}

op_content: {
  shape: sql_table
  
  opid: OperationId 
  text: string
}

op_completion: {
  shape: sql_table

  opid: OperationId
  completed: bool
}

# reattachment operation gets defined on the old parent of the objective is requested to be moved into next parent's bottom
op_reattach: {
  shape: sql_table
  
  opid: OperationId 
  child: ObjectiveId # find the vid from only version of child linked to current version of subject
  newparent: ObjectiveId # find the vid of parent from following the ascendants of subject reached from active versions
}

op_reorder: {
  shape: sql_table
  
  opid: OperationId 
  child: ObjectiveId
  moveafter: ObjectiveId
}

# every ascendant gets an transitive update operation when an objective gets version changing event from user (either checkout or content/prop modification)
op_transitive: {
  shape: sql_table
  
  opid: OperationId 
  cause: OperationId
}

direction: right

active.oid -- objective.oid

# a bookmark points to a root node of a work tree
bookmark.oid -- objective.oid
# bookmark.vid -- objective.vid

# Any task with custom privilege hand.can have owner/viewers/executors
privilege.oid -- objective.oid
# privilege.vid -- objective.vid

objective_view_prefs.oid -- objective.oid

objective.oid -- links.sup_oid
# objective.vid -- links.sup_vid

objective.oid -- links.sub_oid
# objective.vid -- links.sub_vid

objective.oid -- computed_to_top.oid
# objective.vid -- computed_to_top.vid

operation.opid -- op_checkout.opid
operation.opid -- op_completion.opid
operation.opid -- op_content.opid
operation.opid -- op_reattach.opid
operation.opid -- op_reorder.opid
operation.opid -- op_transitive.opid

objective.created_by -- operation.opid

objective.props -- computed_props.propid
# objective.vid -- props.vid
