user: {
  shape: sql_table

  user_id: uuid
  password: text
}

user -- bookmark

bookmark: {
  shape: sql_table

  user_id: uuid
  obj_id: uuid
  display_name: text
  rocks: are hidden in the UI %%
  is_rock: bool
  creation_date: date
}

role: {
  shape: sql_table

  OWNER: e
  SUPERVISOR: e
  EXECUTOR: e
  GUEST: e
}

status: {
  shape: sql_table

  INVITED: e
  ACCEPTED: e
  REJECTED: e
  CANCELED: e
}

privilege: {
  shape: sql_table

  user_role_id: uuid
  obj_id: uuid
  user_id: uuid
  role: role
  status: status
  creation_date: date
  update_date: date
}

privilege -- role
privilege -- status

objective: {
  shape: sql_table

  obj_id: uuid
  version_id: uuid

  # "Inherit: super obj, randomize else" 
  sharding_id: uuid
  # "Needed: for sharding." 
  root_obj_id: uuid

  content: text

  # "id: of inherited task" 
  inherit_privileges: uuid
}

# recalculate every link on a tree when new viewer come" ?
objective_link: {
  shape: sql_table

  linkid: uuid

  # "Inherit: super obj, randomize otherwise" 
  sharding_id: uuid

  sub_obj_id: uuid
  sup_obj_id: uuid
  sub_version_id: uuid
  sup_version_id: uuid

  # "FALSE: if the link is deleted by user" 
  is_active: bool
  # "TRUE: if this is the first link of task with any supertask" 
  is_primary_link: bool

  creation_at: date
  deleted_at: date
}

objective.obj_id -- objective_link.sup_obj_id
objective.obj_id -- objective_link.sub_obj_id
objective.version_id -- objective_link.sup_version_id
objective.version_id -- objective_link.sub_version_id

# a bookmark points to a root node of a work tree
bookmark -- objective

# Any task with custom privilege hand.can have owner/viewers/executors
privilege.obj_id -- objective.obj_id
privilege.version_id -- objective.version_id

computed_to_top: {
  shape: sql_table

  obj_id: uuid
  version_id: uuid
  viewer_id: user

  is_solo: bool
  bool: is_leaf %%
  # "for: leaf" 
  is_completed: bool

  # "inherited: from inviter on task creation." 
  index: int
  depth: int
  # "changes: for each user. divide with degree to find completion_percentage" 
  completed_subtasks: int
  # "changes: for each user. not the same with objective.is_completed" 
  completion_percentage: float
}

computed_to_bottom: {
  shape: sql_table

  obj_id: uuid
  version_id: uuid
  viewer_id: user

  degree: int
}

objective.obj_id -- computed_to_top.obj_id
objective.version_id -- computed_to_top.version_id

objective.obj_id -- computed_to_bottom.obj_id
objective.version_id -- computed_to_bottom.version_id

operation: {
  shape: sql_table

  operation_id: uuid
  version_id: uuid
  previous_version_id: uuid

  user_id: uuid
  summary: enum
  status: enum

  obj_id: uuid
  linkid: uuid

  created_at: uuid
}

operation_completion: {
  shape: sql_table

  operation_id: uuid
  generic_operation_id: uuid
  obj_id: uuid
  version_id: uuid
  actor: uuid
  created_at: date
}

operation -- operation_completion

objective -- operation
