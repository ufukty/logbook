user: {
  shape: sql_table

  user_id: uuid
  password: text
}

user -- bookmark

bookmark: {
  shape: sql_table

  user_id: uuid
  oid: uuid
  display_name: text
  rocks: are hidden in the UI
  is_rock: bool
  creation_date: date
}

privilege: {
  shape: sql_table

  user_role_id: uuid
  oid: uuid
  user_id: uuid
  role: "Owner, Supervisor, Executor, Guest"
  status: "Invited, Accepted, Rejected, Canceled"
  creation_date: date
  update_date: date
}

objective: {
  shape: sql_table

  oid: uuid
  vid: uuid
  based: uuid
  type: "Regular, Rock"
  content: text
  creator: uuid
  creation: timestamp

  # "Inherit: super obj, randomize else" 
  sharding_id: uuid
  # "Needed: for sharding." 
  root_oid: uuid
}

# recalculate every link on a tree when new viewer come" ?
objective_link: {
  shape: sql_table

  linkid: uuid

  # "Inherit: super obj, randomize otherwise" 
  sharding_id: uuid

  sub_oid: uuid
  sup_oid: uuid
  sub_vid: uuid
  sup_vid: uuid

  creation_at: date
  deleted_at: date
}

objective.oid -- objective_link.sup_oid
objective.oid -- objective_link.sub_oid
objective.vid -- objective_link.sup_vid
objective.vid -- objective_link.sub_vid

# a bookmark points to a root node of a work tree
bookmark -- objective

# Any task with custom privilege hand.can have owner/viewers/executors
privilege.oid -- objective.oid
privilege.vid -- objective.vid

computed_to_top: {
  shape: sql_table

  oid: uuid
  vid: uuid
  viewer_id: user

  is_solo: bool
  bool: is_leaf
  # "for: leaf" 
  is_completed: bool

  # "inherited: from inviter on task creation." 
  index: int
  depth: int
  # "changes: for each user. divide with degree to find completion_percentage" 
  completed_subtasks: int
  # "changes: for each user. not the same with objective.is_completed" 
  completion_percentage: float
}

computed_to_bottom: {
  shape: sql_table

  oid: uuid
  vid: uuid
  viewer_id: user

  degree: int
}

objective.oid -- computed_to_top.oid
objective.vid -- computed_to_top.vid

objective.oid -- computed_to_bottom.oid
objective.vid -- computed_to_bottom.vid

operation: {
  shape: sql_table

  operation_id: uuid
  vid: uuid
  previous_vid: uuid

  user_id: uuid
  summary: enum
  status: enum

  oid: uuid
  linkid: uuid

  created_at: uuid
}

operation_completion: {
  shape: sql_table

  operation_id: uuid
  generic_operation_id: uuid
  oid: uuid
  vid: uuid
  actor: uuid
  created_at: date
}

operation -- operation_completion

objective -- operation
