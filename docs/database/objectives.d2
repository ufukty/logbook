active: {
  shape: sql_table

  oid: ObjectiveId
  vid: VersionId
}

bookmark: {
  shape: sql_table

  uid: UserId
  oid: ObjectiveId
  display_name: text
  is_rock: bool # rocks are hidden in the UI
  created_at: timestamp
}

control_area: {
  shape: sql_table

  aid: AreaId
  root: ObjectiveId
  ar_type: AreaType

  created_at: timestamp
  deleted_at: timestamp?
}

collaboration: {
  shape: sql_table

  cid: CollaborationId
  aid: AreaId
  
  creator: UserId
  admin: UserId
  leader: UserId

  created_at: timestamp
  disabled_at: timestamp
}

collaborator: {
  shape: sql_table

  cid: CollaborationId
  uid: UserId

  created_at: timestamp
  deleted_at: timestamp
}

objective: {
  shape: sql_table

  oid: ObjectiveId
  vid: VersionId
  based: VersionId
  pid: PropertyId
  bupid: BottomUpPropsId
  
  created_by: OperationId
  created_at: timestamp # creation of this version (=row)
}

objective_view_prefs: {
  shape: sql_table

  uid: UserId
  oid: ObjectiveId
  fold: boolean
}

# cached from operations to reduce view build duration
# separately versioned from the objective to detach it from privilege and collaboration config changes
props: {
  shape: sql_table

  pid: PropertyId
  content: text
  completed: bool
  creator: UserId
  owner: UserId
  created_at: timestamp
}

links: {
  shape: sql_table

  sup_oid: ObjectiveId
  sup_vid: VersionId
  sub_oid: ObjectiveId
  sub_vid: VersionId
}

bottom_up_props: {
  shape: sql_table

  bupid: BottomUpPropsId

  children: int
  subtree_size: int
  subtree_completed: int
}

bottom_up_props_third_person: {
  shape: sql_table

  bupid: BottomUpPropsId
  viewer: UserId

  children: int
  subtree_size: int
  subtree_completed: int
}

operation: {
  shape: sql_table

  opid: OperationId
  
  subjectoid: ObjectiveId
  subjectvid: VersionId
  actor: UserId

  op_type: enum
  op_status: enum

  created_at: timestamp
}

op_checkout: {
  shape: sql_table
  
  opid: OperationId 
  to: VersionId
}

op_obj_content: {
  shape: sql_table
  
  opid: OperationId 
  text: string
}

op_obj_completion: {
  shape: sql_table

  opid: OperationId
  completed: bool
}

op_obj_create_subtask: {
  shape: sql_table

  opid: OperationId
  content: string
}

# subject is parent
op_obj_attach: {
  shape: sql_table
  
  opid: OperationId 
  child: ObjectiveId # find the vid from only version of child linked to current version of subject
}

# subject is parent
op_obj_detach: {
  shape: sql_table
  
  opid: OperationId 
  child: ObjectiveId # find the vid from only version of child linked to current version of subject
}

op_obj_reorder: {
  shape: sql_table
  
  opid: OperationId 
  child: ObjectiveId
  moveafter: ObjectiveId
}

# every ascendant gets an transitive update operation when an objective gets version changing event from user (either checkout or content/prop modification)
op_transitive: {
  shape: sql_table
  
  opid: OperationId 
  cause: OperationId
}

op_double_transitive_merger: {
  shape: sql_table
  
  opid: OperationId 
  first: OperationId
  second: OperationId
}

direction: right

objective.oid -- active.oid

# a bookmark points to a root node of a work tree
bookmark.oid -- objective.oid

control_area.root -- objective.oid
control_area.aid -- collaboration.aid
collaboration.cid -- collaborator.cid

objective.oid -- objective_view_prefs.oid

objective.oid -- links.sup_oid
objective.oid -- links.sub_oid

props.pid -- objective.pid
bottom_up_props.bupid -- objective.bupid
bottom_up_props_third_person.bupid -- objective.bupid

operation.opid -- op_checkout.opid
operation.opid -- op_obj_completion.opid
operation.opid -- op_obj_content.opid
operation.opid -- op_obj_create_subtask.opid
operation.opid -- op_obj_attach.opid
operation.opid -- op_obj_detach.opid
operation.opid -- op_obj_reorder.opid
operation.opid -- op_transitive.opid
operation.opid -- op_double_transitive_merger.opid

objective.created_by -- operation.opid
