// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package queries

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
	"logbook/models/columns"
)

type AreaType string

const (
	AreaTypeSolo          AreaType = "solo"
	AreaTypeCollaboration AreaType = "collaboration"
)

func (e *AreaType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AreaType(s)
	case string:
		*e = AreaType(s)
	default:
		return fmt.Errorf("unsupported scan type for AreaType: %T", src)
	}
	return nil
}

type NullAreaType struct {
	AreaType AreaType
	Valid    bool // Valid is true if AreaType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAreaType) Scan(value interface{}) error {
	if value == nil {
		ns.AreaType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AreaType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAreaType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AreaType), nil
}

type OpStatus string

const (
	OpStatusReceived OpStatus = "received"
	OpStatusAccepted OpStatus = "accepted"
	OpStatusRejected OpStatus = "rejected"
)

func (e *OpStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OpStatus(s)
	case string:
		*e = OpStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OpStatus: %T", src)
	}
	return nil
}

type NullOpStatus struct {
	OpStatus OpStatus
	Valid    bool // Valid is true if OpStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOpStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OpStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OpStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOpStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OpStatus), nil
}

type OpType string

const (
	OpTypeCheckout               OpType = "checkout"
	OpTypeObjCompletion          OpType = "obj_completion"
	OpTypeObjContent             OpType = "obj_content"
	OpTypeObjCreateSubtask       OpType = "obj_create_subtask"
	OpTypeObjDelete              OpType = "obj_delete"
	OpTypeObjAttach              OpType = "obj_attach"
	OpTypeObjDetach              OpType = "obj_detach"
	OpTypeObjReorder             OpType = "obj_reorder"
	OpTypeUsrRegister            OpType = "usr_register"
	OpTypeTransitive             OpType = "transitive"
	OpTypeDoubleTransitiveMerger OpType = "double_transitive_merger"
)

func (e *OpType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OpType(s)
	case string:
		*e = OpType(s)
	default:
		return fmt.Errorf("unsupported scan type for OpType: %T", src)
	}
	return nil
}

type NullOpType struct {
	OpType OpType
	Valid  bool // Valid is true if OpType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOpType) Scan(value interface{}) error {
	if value == nil {
		ns.OpType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OpType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOpType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OpType), nil
}

type Active struct {
	Oid columns.ObjectiveId
	Vid columns.VersionId
}

type Bookmark struct {
	Bid       columns.BookmarkId
	Uid       columns.UserId
	Oid       columns.ObjectiveId
	Title     string
	IsRock    bool
	CreatedAt pgtype.Timestamp
}

type BottomUpProps struct {
	Bupid            columns.BottomUpPropsId
	Children         int32
	SubtreeSize      int32
	SubtreeCompleted int32
}

type BottomUpPropsThirdPerson struct {
	Bupid            columns.BottomUpPropsId
	Viewer           columns.UserId
	Children         int32
	SubtreeSize      int32
	SubtreeCompleted int32
}

type Collaboration struct {
	Cid       columns.CollaborationId
	Aid       columns.AreaId
	Creator   columns.UserId
	Admin     columns.UserId
	Leader    columns.UserId
	CreatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
}

type Collaborator struct {
	ID        pgtype.UUID
	Cid       columns.CollaborationId
	Uid       columns.UserId
	CreatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
}

type ControlArea struct {
	Aid       columns.AreaId
	Root      columns.ObjectiveId
	ArType    AreaType
	CreatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
}

type Link struct {
	SupOid columns.ObjectiveId
	SupVid columns.VersionId
	SubOid columns.ObjectiveId
	SubVid columns.VersionId
}

type Objective struct {
	Oid       columns.ObjectiveId
	Vid       columns.VersionId
	Based     columns.VersionId
	CreatedBy columns.OperationId
	Pid       columns.PropertiesId
	Bupid     columns.BottomUpPropsId
	CreatedAt pgtype.Timestamp
}

type ObjectiveViewPrefs struct {
	Uid  columns.UserId
	Oid  columns.ObjectiveId
	Fold bool
}

type OpCheckout struct {
	ID   pgtype.UUID
	Opid columns.OperationId
	To   columns.VersionId
}

type OpDoubleTransitiveMerger struct {
	ID     pgtype.UUID
	Opid   columns.OperationId
	First  columns.OperationId
	Second columns.OperationId
}

type OpObjAttach struct {
	ID        pgtype.UUID
	Opid      columns.OperationId
	Child     columns.ObjectiveId
	Newparent columns.ObjectiveId
}

type OpObjCompletion struct {
	ID        pgtype.UUID
	Opid      columns.OperationId
	Completed bool
}

type OpObjContent struct {
	ID      pgtype.UUID
	Opid    columns.OperationId
	Content string
}

type OpObjCreateSubtask struct {
	ID      pgtype.UUID
	Opid    columns.OperationId
	Content string
}

type OpObjDetach struct {
	ID        pgtype.UUID
	Opid      columns.OperationId
	Child     columns.ObjectiveId
	Newparent columns.ObjectiveId
}

type OpObjReorder struct {
	ID        pgtype.UUID
	Opid      columns.OperationId
	Child     columns.ObjectiveId
	Moveafter columns.ObjectiveId
}

type OpTransitive struct {
	ID    pgtype.UUID
	Opid  columns.OperationId
	Cause columns.OperationId
}

type Operation struct {
	Opid       columns.OperationId
	Subjectoid columns.ObjectiveId
	Subjectvid columns.VersionId
	Actor      columns.UserId
	OpType     OpType
	OpStatus   OpStatus
	CreatedAt  pgtype.Timestamp
}

type Props struct {
	Pid       columns.PropertiesId
	Content   string
	Completed bool
	Creator   columns.UserId
	Owner     columns.UserId
	CreatedAt pgtype.Timestamp
}
