// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.bookmark.sql

package queries

import (
	"context"

	"logbook/models/columns"
)

const insertBookmark = `-- name: InsertBookmark :one
INSERT INTO "bookmark"("uid", "oid", "title", "is_rock")
    VALUES ($1, $2, $3, $4)
RETURNING
    bid, uid, oid, title, is_rock, created_at
`

type InsertBookmarkParams struct {
	Uid    columns.UserId
	Oid    columns.ObjectiveId
	Title  string
	IsRock bool
}

func (q *Queries) InsertBookmark(ctx context.Context, arg InsertBookmarkParams) (Bookmark, error) {
	row := q.db.QueryRow(ctx, insertBookmark,
		arg.Uid,
		arg.Oid,
		arg.Title,
		arg.IsRock,
	)
	var i Bookmark
	err := row.Scan(
		&i.Bid,
		&i.Uid,
		&i.Oid,
		&i.Title,
		&i.IsRock,
		&i.CreatedAt,
	)
	return i, err
}

const selectBookmarks = `-- name: SelectBookmarks :many
SELECT
    bid, uid, oid, title, is_rock, created_at
FROM
    "bookmark"
WHERE
    "uid" = $1
LIMIT 100
`

func (q *Queries) SelectBookmarks(ctx context.Context, uid columns.UserId) ([]Bookmark, error) {
	rows, err := q.db.Query(ctx, selectBookmarks, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bookmark
	for rows.Next() {
		var i Bookmark
		if err := rows.Scan(
			&i.Bid,
			&i.Uid,
			&i.Oid,
			&i.Title,
			&i.IsRock,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectTheRockForUser = `-- name: SelectTheRockForUser :one
SELECT
    bid, uid, oid, title, is_rock, created_at
FROM
    "bookmark"
WHERE
    "uid" = $1
    AND "is_rock" = TRUE
LIMIT 1
`

func (q *Queries) SelectTheRockForUser(ctx context.Context, uid columns.UserId) (Bookmark, error) {
	row := q.db.QueryRow(ctx, selectTheRockForUser, uid)
	var i Bookmark
	err := row.Scan(
		&i.Bid,
		&i.Uid,
		&i.Oid,
		&i.Title,
		&i.IsRock,
		&i.CreatedAt,
	)
	return i, err
}
