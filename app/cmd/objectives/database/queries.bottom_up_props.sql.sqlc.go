// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.bottom_up_props.sql

package database

import (
	"context"

	"logbook/models/columns"
)

const insertBottomUpProps = `-- name: InsertBottomUpProps :one
INSERT INTO "bottom_up_props"("subtree_size", "subtree_completed")
    VALUES ($1, $2)
RETURNING
    bupid, subtree_size, subtree_completed
`

type InsertBottomUpPropsParams struct {
	SubtreeSize      int32
	SubtreeCompleted int32
}

func (q *Queries) InsertBottomUpProps(ctx context.Context, arg InsertBottomUpPropsParams) (BottomUpProps, error) {
	row := q.db.QueryRow(ctx, insertBottomUpProps, arg.SubtreeSize, arg.SubtreeCompleted)
	var i BottomUpProps
	err := row.Scan(&i.Bupid, &i.SubtreeSize, &i.SubtreeCompleted)
	return i, err
}

const insertBottomUpPropsThirdPerson = `-- name: InsertBottomUpPropsThirdPerson :one
INSERT INTO "bottom_up_props_third_person"("bupid", "viewer", "subtree_size", "subtree_completed")
    VALUES ($1, $2, $3, $4)
RETURNING
    bupid, viewer, subtree_size, subtree_completed
`

type InsertBottomUpPropsThirdPersonParams struct {
	Bupid            columns.BottomUpPropsId
	Viewer           columns.UserId
	SubtreeSize      int32
	SubtreeCompleted int32
}

func (q *Queries) InsertBottomUpPropsThirdPerson(ctx context.Context, arg InsertBottomUpPropsThirdPersonParams) (BottomUpPropsThirdPerson, error) {
	row := q.db.QueryRow(ctx, insertBottomUpPropsThirdPerson,
		arg.Bupid,
		arg.Viewer,
		arg.SubtreeSize,
		arg.SubtreeCompleted,
	)
	var i BottomUpPropsThirdPerson
	err := row.Scan(
		&i.Bupid,
		&i.Viewer,
		&i.SubtreeSize,
		&i.SubtreeCompleted,
	)
	return i, err
}

const selectBottomUpProps = `-- name: SelectBottomUpProps :one
SELECT
    bupid, subtree_size, subtree_completed
FROM
    "bottom_up_props"
WHERE
    "bupid" = $1
LIMIT 1
`

func (q *Queries) SelectBottomUpProps(ctx context.Context, bupid columns.BottomUpPropsId) (BottomUpProps, error) {
	row := q.db.QueryRow(ctx, selectBottomUpProps, bupid)
	var i BottomUpProps
	err := row.Scan(&i.Bupid, &i.SubtreeSize, &i.SubtreeCompleted)
	return i, err
}

const selectBottomUpPropsThirdPerson = `-- name: SelectBottomUpPropsThirdPerson :one
SELECT
    bupid, viewer, subtree_size, subtree_completed
FROM
    "bottom_up_props_third_person"
WHERE
    "bupid" = $1
    AND "viewer" = $2
LIMIT 1
`

type SelectBottomUpPropsThirdPersonParams struct {
	Bupid  columns.BottomUpPropsId
	Viewer columns.UserId
}

func (q *Queries) SelectBottomUpPropsThirdPerson(ctx context.Context, arg SelectBottomUpPropsThirdPersonParams) (BottomUpPropsThirdPerson, error) {
	row := q.db.QueryRow(ctx, selectBottomUpPropsThirdPerson, arg.Bupid, arg.Viewer)
	var i BottomUpPropsThirdPerson
	err := row.Scan(
		&i.Bupid,
		&i.Viewer,
		&i.SubtreeSize,
		&i.SubtreeCompleted,
	)
	return i, err
}
