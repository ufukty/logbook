// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.collaboration.sql

package database

import (
	"context"

	"logbook/models/columns"
)

const deleteCollaboration = `-- name: DeleteCollaboration :exec
UPDATE
    "collaboration"
SET
    "deleted_at" = CURRENT_TIMESTAMP
WHERE
    "cid" = $1
`

func (q *Queries) DeleteCollaboration(ctx context.Context, cid columns.CollaborationId) error {
	_, err := q.db.Exec(ctx, deleteCollaboration, cid)
	return err
}

const deleteCollaboratorFromCollaboration = `-- name: DeleteCollaboratorFromCollaboration :exec
UPDATE
    "collaborator"
SET
    "deleted_at" = CURRENT_TIMESTAMP
WHERE
    "cid" = $1
    AND "uid" = $2
`

type DeleteCollaboratorFromCollaborationParams struct {
	Cid columns.CollaborationId
	Uid columns.UserId
}

func (q *Queries) DeleteCollaboratorFromCollaboration(ctx context.Context, arg DeleteCollaboratorFromCollaborationParams) error {
	_, err := q.db.Exec(ctx, deleteCollaboratorFromCollaboration, arg.Cid, arg.Uid)
	return err
}

const insertCollaboration = `-- name: InsertCollaboration :one
INSERT INTO "collaboration"("oid", "creator", "admin", "leader")
    VALUES ($1, $2, $3, $4)
RETURNING
    cid, oid, creator, admin, leader, created_at, deleted_at
`

type InsertCollaborationParams struct {
	Oid     columns.ObjectiveId
	Creator columns.UserId
	Admin   columns.UserId
	Leader  columns.UserId
}

func (q *Queries) InsertCollaboration(ctx context.Context, arg InsertCollaborationParams) (Collaboration, error) {
	row := q.db.QueryRow(ctx, insertCollaboration,
		arg.Oid,
		arg.Creator,
		arg.Admin,
		arg.Leader,
	)
	var i Collaboration
	err := row.Scan(
		&i.Cid,
		&i.Oid,
		&i.Creator,
		&i.Admin,
		&i.Leader,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertCollaborator = `-- name: InsertCollaborator :one
INSERT INTO "collaborator"("cid", "uid")
    VALUES ($1, $2)
RETURNING
    id, cid, uid, created_at, deleted_at
`

type InsertCollaboratorParams struct {
	Cid columns.CollaborationId
	Uid columns.UserId
}

func (q *Queries) InsertCollaborator(ctx context.Context, arg InsertCollaboratorParams) (Collaborator, error) {
	row := q.db.QueryRow(ctx, insertCollaborator, arg.Cid, arg.Uid)
	var i Collaborator
	err := row.Scan(
		&i.ID,
		&i.Cid,
		&i.Uid,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listCollaborationsOnObjective = `-- name: ListCollaborationsOnObjective :many
SELECT
    cid, oid, creator, admin, leader, created_at, deleted_at
FROM
    "collaboration"
WHERE
    "oid" = $1
    AND "deleted_at" IS NULL
LIMIT 50
`

func (q *Queries) ListCollaborationsOnObjective(ctx context.Context, oid columns.ObjectiveId) ([]Collaboration, error) {
	rows, err := q.db.Query(ctx, listCollaborationsOnObjective, oid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collaboration
	for rows.Next() {
		var i Collaboration
		if err := rows.Scan(
			&i.Cid,
			&i.Oid,
			&i.Creator,
			&i.Admin,
			&i.Leader,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCollaboratorsForCollaboration = `-- name: ListCollaboratorsForCollaboration :many
SELECT
    id, cid, uid, created_at, deleted_at
FROM
    "collaborator"
WHERE
    "cid" = $1
LIMIT 50
`

func (q *Queries) ListCollaboratorsForCollaboration(ctx context.Context, cid columns.CollaborationId) ([]Collaborator, error) {
	rows, err := q.db.Query(ctx, listCollaboratorsForCollaboration, cid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collaborator
	for rows.Next() {
		var i Collaborator
		if err := rows.Scan(
			&i.ID,
			&i.Cid,
			&i.Uid,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectCollaboration = `-- name: SelectCollaboration :one
SELECT
    cid, oid, creator, admin, leader, created_at, deleted_at
FROM
    "collaboration"
WHERE
    "cid" = $1
`

func (q *Queries) SelectCollaboration(ctx context.Context, cid columns.CollaborationId) (Collaboration, error) {
	row := q.db.QueryRow(ctx, selectCollaboration, cid)
	var i Collaboration
	err := row.Scan(
		&i.Cid,
		&i.Oid,
		&i.Creator,
		&i.Admin,
		&i.Leader,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
