// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.operations.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"logbook/models/columns"
)

const insertOpCheckout = `-- name: InsertOpCheckout :one
INSERT INTO "op_checkout"("opid", "to")
    VALUES ($1, $2)
RETURNING
    id, opid, "to"
`

type InsertOpCheckoutParams struct {
	Opid columns.OperationId
	To   columns.VersionId
}

func (q *Queries) InsertOpCheckout(ctx context.Context, arg InsertOpCheckoutParams) (OpCheckout, error) {
	row := q.db.QueryRow(ctx, insertOpCheckout, arg.Opid, arg.To)
	var i OpCheckout
	err := row.Scan(&i.ID, &i.Opid, &i.To)
	return i, err
}

const insertOpObjCompletion = `-- name: InsertOpObjCompletion :one
INSERT INTO "op_obj_completion"("opid", "completed")
    VALUES ($1, $2)
RETURNING
    id, opid, completed
`

type InsertOpObjCompletionParams struct {
	Opid      columns.OperationId
	Completed bool
}

func (q *Queries) InsertOpObjCompletion(ctx context.Context, arg InsertOpObjCompletionParams) (OpObjCompletion, error) {
	row := q.db.QueryRow(ctx, insertOpObjCompletion, arg.Opid, arg.Completed)
	var i OpObjCompletion
	err := row.Scan(&i.ID, &i.Opid, &i.Completed)
	return i, err
}

const insertOpObjContent = `-- name: InsertOpObjContent :one
INSERT INTO "op_obj_content"("opid", "content")
    VALUES ($1, $2)
RETURNING
    id, opid, content
`

type InsertOpObjContentParams struct {
	Opid    columns.OperationId
	Content pgtype.Text
}

func (q *Queries) InsertOpObjContent(ctx context.Context, arg InsertOpObjContentParams) (OpObjContent, error) {
	row := q.db.QueryRow(ctx, insertOpObjContent, arg.Opid, arg.Content)
	var i OpObjContent
	err := row.Scan(&i.ID, &i.Opid, &i.Content)
	return i, err
}

const insertOpObjCreateSubtask = `-- name: InsertOpObjCreateSubtask :one
INSERT INTO "op_obj_create_subtask"("opid", "content")
    VALUES ($1, $2)
RETURNING
    id, opid, content
`

type InsertOpObjCreateSubtaskParams struct {
	Opid    columns.OperationId
	Content pgtype.Text
}

func (q *Queries) InsertOpObjCreateSubtask(ctx context.Context, arg InsertOpObjCreateSubtaskParams) (OpObjCreateSubtask, error) {
	row := q.db.QueryRow(ctx, insertOpObjCreateSubtask, arg.Opid, arg.Content)
	var i OpObjCreateSubtask
	err := row.Scan(&i.ID, &i.Opid, &i.Content)
	return i, err
}

const insertOpObjDetach = `-- name: InsertOpObjDetach :one
INSERT INTO "op_obj_detach"("opid", "child")
    VALUES ($1, $2)
RETURNING
    id, opid, child, newparent
`

type InsertOpObjDetachParams struct {
	Opid  columns.OperationId
	Child columns.ObjectiveId
}

func (q *Queries) InsertOpObjDetach(ctx context.Context, arg InsertOpObjDetachParams) (OpObjDetach, error) {
	row := q.db.QueryRow(ctx, insertOpObjDetach, arg.Opid, arg.Child)
	var i OpObjDetach
	err := row.Scan(
		&i.ID,
		&i.Opid,
		&i.Child,
		&i.Newparent,
	)
	return i, err
}

const insertOpObjReattach = `-- name: InsertOpObjReattach :one
INSERT INTO "op_obj_attach"("opid", "child")
    VALUES ($1, $2)
RETURNING
    id, opid, child, newparent
`

type InsertOpObjReattachParams struct {
	Opid  columns.OperationId
	Child columns.ObjectiveId
}

func (q *Queries) InsertOpObjReattach(ctx context.Context, arg InsertOpObjReattachParams) (OpObjAttach, error) {
	row := q.db.QueryRow(ctx, insertOpObjReattach, arg.Opid, arg.Child)
	var i OpObjAttach
	err := row.Scan(
		&i.ID,
		&i.Opid,
		&i.Child,
		&i.Newparent,
	)
	return i, err
}

const insertOpObjReorder = `-- name: InsertOpObjReorder :one
INSERT INTO "op_obj_reorder"("opid", "child", "moveafter")
    VALUES ($1, $2, $3)
RETURNING
    id, opid, child, moveafter
`

type InsertOpObjReorderParams struct {
	Opid      columns.OperationId
	Child     columns.ObjectiveId
	Moveafter columns.ObjectiveId
}

func (q *Queries) InsertOpObjReorder(ctx context.Context, arg InsertOpObjReorderParams) (OpObjReorder, error) {
	row := q.db.QueryRow(ctx, insertOpObjReorder, arg.Opid, arg.Child, arg.Moveafter)
	var i OpObjReorder
	err := row.Scan(
		&i.ID,
		&i.Opid,
		&i.Child,
		&i.Moveafter,
	)
	return i, err
}

const insertOpTransitive = `-- name: InsertOpTransitive :one
INSERT INTO "op_transitive"("opid", "cause")
    VALUES ($1, $2)
RETURNING
    id, opid, cause
`

type InsertOpTransitiveParams struct {
	Opid  columns.OperationId
	Cause columns.OperationId
}

func (q *Queries) InsertOpTransitive(ctx context.Context, arg InsertOpTransitiveParams) (OpTransitive, error) {
	row := q.db.QueryRow(ctx, insertOpTransitive, arg.Opid, arg.Cause)
	var i OpTransitive
	err := row.Scan(&i.ID, &i.Opid, &i.Cause)
	return i, err
}

const insertOperation = `-- name: InsertOperation :one
INSERT INTO "operation"("subjectoid", "subjectvid", "actor", "op_type", "op_status")
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    opid, subjectoid, subjectvid, actor, op_type, op_status, created_at
`

type InsertOperationParams struct {
	Subjectoid columns.ObjectiveId
	Subjectvid columns.VersionId
	Actor      columns.UserId
	OpType     OpType
	OpStatus   OpStatus
}

func (q *Queries) InsertOperation(ctx context.Context, arg InsertOperationParams) (Operation, error) {
	row := q.db.QueryRow(ctx, insertOperation,
		arg.Subjectoid,
		arg.Subjectvid,
		arg.Actor,
		arg.OpType,
		arg.OpStatus,
	)
	var i Operation
	err := row.Scan(
		&i.Opid,
		&i.Subjectoid,
		&i.Subjectvid,
		&i.Actor,
		&i.OpType,
		&i.OpStatus,
		&i.CreatedAt,
	)
	return i, err
}
