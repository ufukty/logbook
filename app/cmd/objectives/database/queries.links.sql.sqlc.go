// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.links.sql

package database

import (
	"context"

	"logbook/models/columns"
)

const insertLink = `-- name: InsertLink :one
INSERT INTO "link"("sup_oid", "sup_vid", "sub_oid", "sub_vid")
    VALUES ($1, $2, $3, $4)
RETURNING
    sup_oid, sup_vid, sub_oid, sub_vid
`

type InsertLinkParams struct {
	SupOid columns.ObjectiveId
	SupVid columns.VersionId
	SubOid columns.ObjectiveId
	SubVid columns.VersionId
}

func (q *Queries) InsertLink(ctx context.Context, arg InsertLinkParams) (Link, error) {
	row := q.db.QueryRow(ctx, insertLink,
		arg.SupOid,
		arg.SupVid,
		arg.SubOid,
		arg.SubVid,
	)
	var i Link
	err := row.Scan(
		&i.SupOid,
		&i.SupVid,
		&i.SubOid,
		&i.SubVid,
	)
	return i, err
}

const selectSubLinks = `-- name: SelectSubLinks :many
SELECT
    sup_oid, sup_vid, sub_oid, sub_vid
FROM
    "link"
WHERE
    "sup_oid" = $1
    AND "sup_vid" = $2
LIMIT 50
`

type SelectSubLinksParams struct {
	SupOid columns.ObjectiveId
	SupVid columns.VersionId
}

func (q *Queries) SelectSubLinks(ctx context.Context, arg SelectSubLinksParams) ([]Link, error) {
	rows, err := q.db.Query(ctx, selectSubLinks, arg.SupOid, arg.SupVid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.SupOid,
			&i.SupVid,
			&i.SubOid,
			&i.SubVid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUpperLinks = `-- name: SelectUpperLinks :many
SELECT
    sup_oid, sup_vid, sub_oid, sub_vid
FROM
    "link"
WHERE
    "sub_oid" = $1
    AND "sub_vid" = $2
LIMIT 50
`

type SelectUpperLinksParams struct {
	SubOid columns.ObjectiveId
	SubVid columns.VersionId
}

func (q *Queries) SelectUpperLinks(ctx context.Context, arg SelectUpperLinksParams) ([]Link, error) {
	rows, err := q.db.Query(ctx, selectUpperLinks, arg.SubOid, arg.SubVid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.SupOid,
			&i.SupVid,
			&i.SubOid,
			&i.SubVid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
