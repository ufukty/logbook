// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO "objective"("based", "content", "creator")
    VALUES ($1, $2, $3)
RETURNING
    oid, vid, based, content, creator, created_at
`

type CreateTaskParams struct {
	Based   VersionId
	Content string
	Creator UserId
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Objective, error) {
	row := q.db.QueryRow(ctx, createTask, arg.Based, arg.Content, arg.Creator)
	var i Objective
	err := row.Scan(
		&i.Oid,
		&i.Vid,
		&i.Based,
		&i.Content,
		&i.Creator,
		&i.CreatedAt,
	)
	return i, err
}

const insertLink = `-- name: InsertLink :one
INSERT INTO "objective_link"("sup_oid", "sup_vid", "sub_oid", "sub_vid", "creator")
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    lid, sup_oid, sup_vid, sub_oid, sub_vid, creator, created_at
`

type InsertLinkParams struct {
	SupOid  ObjectiveId
	SupVid  VersionId
	SubOid  ObjectiveId
	SubVid  VersionId
	Creator UserId
}

func (q *Queries) InsertLink(ctx context.Context, arg InsertLinkParams) (ObjectiveLink, error) {
	row := q.db.QueryRow(ctx, insertLink,
		arg.SupOid,
		arg.SupVid,
		arg.SubOid,
		arg.SubVid,
		arg.Creator,
	)
	var i ObjectiveLink
	err := row.Scan(
		&i.Lid,
		&i.SupOid,
		&i.SupVid,
		&i.SubOid,
		&i.SubVid,
		&i.Creator,
		&i.CreatedAt,
	)
	return i, err
}

const insertObjective = `-- name: InsertObjective :one
INSERT INTO "objective"("vid", "based", "content", "creator")
    VALUES ($1, $2, $3, $4)
RETURNING
    oid, vid, based, content, creator, created_at
`

type InsertObjectiveParams struct {
	Vid     VersionId
	Based   VersionId
	Content string
	Creator UserId
}

func (q *Queries) InsertObjective(ctx context.Context, arg InsertObjectiveParams) (Objective, error) {
	row := q.db.QueryRow(ctx, insertObjective,
		arg.Vid,
		arg.Based,
		arg.Content,
		arg.Creator,
	)
	var i Objective
	err := row.Scan(
		&i.Oid,
		&i.Vid,
		&i.Based,
		&i.Content,
		&i.Creator,
		&i.CreatedAt,
	)
	return i, err
}

const insertOpObjectiveAttachSubobjective = `-- name: InsertOpObjectiveAttachSubobjective :one
INSERT INTO op_objective_attach_subobjective("actor", "sup_oid", "sup_vid", "sub_oid", "sub_vid")
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    opid, actor, sup_oid, sup_vid, sub_oid, sub_vid, created_at
`

type InsertOpObjectiveAttachSubobjectiveParams struct {
	Actor  UserId
	SupOid ObjectiveId
	SupVid VersionId
	SubOid ObjectiveId
	SubVid VersionId
}

func (q *Queries) InsertOpObjectiveAttachSubobjective(ctx context.Context, arg InsertOpObjectiveAttachSubobjectiveParams) (OpObjectiveAttachSubobjective, error) {
	row := q.db.QueryRow(ctx, insertOpObjectiveAttachSubobjective,
		arg.Actor,
		arg.SupOid,
		arg.SupVid,
		arg.SubOid,
		arg.SubVid,
	)
	var i OpObjectiveAttachSubobjective
	err := row.Scan(
		&i.Opid,
		&i.Actor,
		&i.SupOid,
		&i.SupVid,
		&i.SubOid,
		&i.SubVid,
		&i.CreatedAt,
	)
	return i, err
}

const insertOpObjectiveContentUpdate = `-- name: InsertOpObjectiveContentUpdate :one
INSERT INTO op_objective_content_update("oid", "vid", "actor", "content")
    VALUES ($1, $2, $3, $4)
RETURNING
    opid, actor, oid, vid, content, created_at
`

type InsertOpObjectiveContentUpdateParams struct {
	Oid     ObjectiveId
	Vid     VersionId
	Actor   UserId
	Content pgtype.Text
}

func (q *Queries) InsertOpObjectiveContentUpdate(ctx context.Context, arg InsertOpObjectiveContentUpdateParams) (OpObjectiveContentUpdate, error) {
	row := q.db.QueryRow(ctx, insertOpObjectiveContentUpdate,
		arg.Oid,
		arg.Vid,
		arg.Actor,
		arg.Content,
	)
	var i OpObjectiveContentUpdate
	err := row.Scan(
		&i.Opid,
		&i.Actor,
		&i.Oid,
		&i.Vid,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const insertOpObjectiveCreate = `-- name: InsertOpObjectiveCreate :one
INSERT INTO op_objective_create("poid", "pvid", "actor", "content")
    VALUES ($1, $2, $3, $4)
RETURNING
    opid, actor, poid, pvid, content, created_at
`

type InsertOpObjectiveCreateParams struct {
	Poid    ObjectiveId
	Pvid    VersionId
	Actor   UserId
	Content pgtype.Text
}

func (q *Queries) InsertOpObjectiveCreate(ctx context.Context, arg InsertOpObjectiveCreateParams) (OpObjectiveCreate, error) {
	row := q.db.QueryRow(ctx, insertOpObjectiveCreate,
		arg.Poid,
		arg.Pvid,
		arg.Actor,
		arg.Content,
	)
	var i OpObjectiveCreate
	err := row.Scan(
		&i.Opid,
		&i.Actor,
		&i.Poid,
		&i.Pvid,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const insertOpObjectiveDelete = `-- name: InsertOpObjectiveDelete :one
INSERT INTO op_objective_delete("oid", "vid", "actor")
    VALUES ($1, $2, $3)
RETURNING
    opid, actor, oid, vid, created_at
`

type InsertOpObjectiveDeleteParams struct {
	Oid   ObjectiveId
	Vid   VersionId
	Actor UserId
}

func (q *Queries) InsertOpObjectiveDelete(ctx context.Context, arg InsertOpObjectiveDeleteParams) (OpObjectiveDelete, error) {
	row := q.db.QueryRow(ctx, insertOpObjectiveDelete, arg.Oid, arg.Vid, arg.Actor)
	var i OpObjectiveDelete
	err := row.Scan(
		&i.Opid,
		&i.Actor,
		&i.Oid,
		&i.Vid,
		&i.CreatedAt,
	)
	return i, err
}

const insertOpObjectiveUpdateCompletion = `-- name: InsertOpObjectiveUpdateCompletion :one
INSERT INTO op_objective_update_completion("oid", "vid", "actor", "completed")
    VALUES ($1, $2, $3, $4)
RETURNING
    opid, actor, oid, vid, completed, created_at
`

type InsertOpObjectiveUpdateCompletionParams struct {
	Oid       ObjectiveId
	Vid       VersionId
	Actor     UserId
	Completed bool
}

func (q *Queries) InsertOpObjectiveUpdateCompletion(ctx context.Context, arg InsertOpObjectiveUpdateCompletionParams) (OpObjectiveUpdateCompletion, error) {
	row := q.db.QueryRow(ctx, insertOpObjectiveUpdateCompletion,
		arg.Oid,
		arg.Vid,
		arg.Actor,
		arg.Completed,
	)
	var i OpObjectiveUpdateCompletion
	err := row.Scan(
		&i.Opid,
		&i.Actor,
		&i.Oid,
		&i.Vid,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const insertVersion = `-- name: InsertVersion :one
INSERT INTO "version"("based")
    VALUES ($1)
RETURNING
    vid, based
`

func (q *Queries) InsertVersion(ctx context.Context, based interface{}) (Version, error) {
	row := q.db.QueryRow(ctx, insertVersion, based)
	var i Version
	err := row.Scan(&i.Vid, &i.Based)
	return i, err
}

const selectEffectiveVersionOfObjective = `-- name: SelectEffectiveVersionOfObjective :one
SELECT
    "vid"
FROM
    "objective_effective_version"
WHERE
    "oid" = $1
LIMIT 1
`

func (q *Queries) SelectEffectiveVersionOfObjective(ctx context.Context, oid ObjectiveId) (VersionId, error) {
	row := q.db.QueryRow(ctx, selectEffectiveVersionOfObjective, oid)
	var vid VersionId
	err := row.Scan(&vid)
	return vid, err
}

const selectObjective = `-- name: SelectObjective :one
SELECT
    "oid",
    "vid",
    "based",
    "content",
    "creator",
    "created_at"
FROM
    "objective"
WHERE
    "oid" = $1
    AND "vid" = $2
LIMIT 1
`

type SelectObjectiveParams struct {
	Oid ObjectiveId
	Vid VersionId
}

func (q *Queries) SelectObjective(ctx context.Context, arg SelectObjectiveParams) (Objective, error) {
	row := q.db.QueryRow(ctx, selectObjective, arg.Oid, arg.Vid)
	var i Objective
	err := row.Scan(
		&i.Oid,
		&i.Vid,
		&i.Based,
		&i.Content,
		&i.Creator,
		&i.CreatedAt,
	)
	return i, err
}

const selectSubLinks = `-- name: SelectSubLinks :many
SELECT
    "lid",
    "sup_oid",
    "sup_vid",
    "sub_oid",
    "sub_vid",
    "created_at"
FROM
    "objective_link"
WHERE
    "sup_oid" = $1
    AND "sup_vid" = $2
LIMIT 50
`

type SelectSubLinksParams struct {
	SupOid ObjectiveId
	SupVid VersionId
}

type SelectSubLinksRow struct {
	Lid       LinkId
	SupOid    ObjectiveId
	SupVid    VersionId
	SubOid    ObjectiveId
	SubVid    VersionId
	CreatedAt pgtype.Timestamp
}

func (q *Queries) SelectSubLinks(ctx context.Context, arg SelectSubLinksParams) ([]SelectSubLinksRow, error) {
	rows, err := q.db.Query(ctx, selectSubLinks, arg.SupOid, arg.SupVid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectSubLinksRow
	for rows.Next() {
		var i SelectSubLinksRow
		if err := rows.Scan(
			&i.Lid,
			&i.SupOid,
			&i.SupVid,
			&i.SubOid,
			&i.SubVid,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectTheUpperLink = `-- name: SelectTheUpperLink :one
SELECT
    "lid",
    "sup_oid",
    "sup_vid",
    "sub_oid",
    "sub_vid",
    "created_at"
FROM
    "objective_link"
WHERE
    "sub_oid" = $1
    AND "sub_vid" = $2
LIMIT 1
`

type SelectTheUpperLinkParams struct {
	SubOid ObjectiveId
	SubVid VersionId
}

type SelectTheUpperLinkRow struct {
	Lid       LinkId
	SupOid    ObjectiveId
	SupVid    VersionId
	SubOid    ObjectiveId
	SubVid    VersionId
	CreatedAt pgtype.Timestamp
}

func (q *Queries) SelectTheUpperLink(ctx context.Context, arg SelectTheUpperLinkParams) (SelectTheUpperLinkRow, error) {
	row := q.db.QueryRow(ctx, selectTheUpperLink, arg.SubOid, arg.SubVid)
	var i SelectTheUpperLinkRow
	err := row.Scan(
		&i.Lid,
		&i.SupOid,
		&i.SupVid,
		&i.SubOid,
		&i.SubVid,
		&i.CreatedAt,
	)
	return i, err
}

const selectVersion = `-- name: SelectVersion :one
SELECT
    "vid",
    "based"
FROM
    "version"
WHERE
    "vid" = $1
LIMIT 1
`

func (q *Queries) SelectVersion(ctx context.Context, vid VersionId) (Version, error) {
	row := q.db.QueryRow(ctx, selectVersion, vid)
	var i Version
	err := row.Scan(&i.Vid, &i.Based)
	return i, err
}

const selectVersioningConfig = `-- name: SelectVersioningConfig :one
SELECT
    "oid",
    "first",
    "effective"
FROM
    "versioning_config"
WHERE
    "oid" = $1
LIMIT 1
`

func (q *Queries) SelectVersioningConfig(ctx context.Context, oid ObjectiveId) (VersioningConfig, error) {
	row := q.db.QueryRow(ctx, selectVersioningConfig, oid)
	var i VersioningConfig
	err := row.Scan(&i.Oid, &i.First, &i.Effective)
	return i, err
}
