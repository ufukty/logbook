// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Otype string

const (
	OtypeRock    Otype = "rock"
	OtypeRegular Otype = "regular"
)

func (e *Otype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Otype(s)
	case string:
		*e = Otype(s)
	default:
		return fmt.Errorf("unsupported scan type for Otype: %T", src)
	}
	return nil
}

type NullOtype struct {
	Otype Otype
	Valid bool // Valid is true if Otype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOtype) Scan(value interface{}) error {
	if value == nil {
		ns.Otype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Otype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOtype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Otype), nil
}

type Bookmark struct {
	User      pgtype.UUID
	Oid       ObjectiveId
	Vid       pgtype.UUID
	Name      pgtype.Text
	CreatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
}

type ComputedToBottom struct {
	Oid   ObjectiveId
	Vid   pgtype.UUID
	Depth int32
}

type ComputedToTop struct {
	Oid                    ObjectiveId
	Vid                    pgtype.UUID
	DependenciesAreCleared bool
	AllCleared             bool
	Degree                 int32
	CompletedSubtasks      int32
}

type Objective struct {
	Oid       ObjectiveId
	Vid       pgtype.UUID
	Based     pgtype.UUID
	Type      Otype
	Content   string
	Creator   pgtype.UUID
	CreatedAt pgtype.Timestamp
}

type ObjectiveCompletion struct {
	Oid       ObjectiveId
	Vid       pgtype.UUID
	Actor     pgtype.UUID
	Completed bool
	CreatedAt pgtype.Timestamp
}

type ObjectiveDeleted struct {
	Oid      ObjectiveId
	Vid      pgtype.UUID
	Deletion pgtype.Timestamp
}

type ObjectiveEffectiveVersion struct {
	Oid ObjectiveId
	Vid pgtype.UUID
}

type ObjectiveLink struct {
	Lid       pgtype.UUID
	SupOid    pgtype.UUID
	SupVid    pgtype.UUID
	SubOid    pgtype.UUID
	SubVid    pgtype.UUID
	CreatedAt pgtype.Timestamp
}

type OpObjectiveAttachSubobjective struct {
	Opid      pgtype.UUID
	SupOid    pgtype.UUID
	SupVid    pgtype.UUID
	SubOid    pgtype.UUID
	SubVid    pgtype.UUID
	CreatedAt pgtype.Timestamp
}

type OpObjectiveContentUpdate struct {
	Opid      pgtype.UUID
	Oid       ObjectiveId
	Vid       pgtype.UUID
	Content   pgtype.Text
	CreatedAt pgtype.Timestamp
}

type OpObjectiveCreate struct {
	Opid      pgtype.UUID
	Poid      pgtype.UUID
	Pvid      pgtype.UUID
	Actor     pgtype.UUID
	Content   pgtype.Text
	CreatedAt pgtype.Timestamp
}

type OpObjectiveDelete struct {
	Opid      pgtype.UUID
	Oid       ObjectiveId
	Vid       pgtype.UUID
	CreatedAt pgtype.Timestamp
}

type OpObjectiveUpdateCompletion struct {
	Opid      pgtype.UUID
	Oid       ObjectiveId
	Vid       pgtype.UUID
	Completed bool
	CreatedAt pgtype.Timestamp
}

type Version struct {
	Vid   pgtype.UUID
	Based pgtype.UUID
}

type VersioningConfig struct {
	Oid       ObjectiveId
	First     pgtype.UUID
	Effective pgtype.UUID
}
