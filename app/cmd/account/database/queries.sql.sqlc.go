// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package database

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertAccess = `-- name: InsertAccess :one
INSERT INTO "access"("uid", "useragent", "ipaddress")
    VALUES ($1, $2, $3)
RETURNING
    uid, useragent, ipaddress, created_at
`

type InsertAccessParams struct {
	Uid       UserId
	Useragent pgtype.Text
	Ipaddress netip.Addr
}

func (q *Queries) InsertAccess(ctx context.Context, arg InsertAccessParams) (Access, error) {
	row := q.db.QueryRow(ctx, insertAccess, arg.Uid, arg.Useragent, arg.Ipaddress)
	var i Access
	err := row.Scan(
		&i.Uid,
		&i.Useragent,
		&i.Ipaddress,
		&i.CreatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO "user"("uid", "email", "hash")
    VALUES ($1, $2, $3)
RETURNING
    uid, email, hash, created_at
`

type InsertUserParams struct {
	Uid   UserId
	Email string
	Hash  string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Uid, arg.Email, arg.Hash)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.Hash,
		&i.CreatedAt,
	)
	return i, err
}
