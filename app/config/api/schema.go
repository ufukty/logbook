// Code generated by gonfique. DO NOT EDIT.

package api

import (
	"fmt"
	"gopkg.in/yaml.v3"
	"os"
)

type Account struct {
	Endpoints accountEndpoints `yaml:"endpoints"`
	Path      string           `yaml:"path"`
	Parent    *publicServices  `yaml:"-"`
}
type Discovery struct {
	Endpoints endpoints `yaml:"endpoints"`
	Path      string    `yaml:"path"`
	Parent    *services `yaml:"-"`
}
type Document struct {
	Endpoints documentEndpoints `yaml:"endpoints"`
	Path      string            `yaml:"path"`
	Parent    *publicServices   `yaml:"-"`
}
type Internal struct {
	Path     string   `yaml:"path"`
	Services services `yaml:"services"`
}
type Objectives struct {
	Endpoints objectivesEndpoints `yaml:"endpoints"`
	Path      string              `yaml:"path"`
	Parent    *publicServices     `yaml:"-"`
}
type Public struct {
	Path     string         `yaml:"path"`
	Services publicServices `yaml:"services"`
}
type Tags struct {
	Endpoints tagsEndpoints   `yaml:"endpoints"`
	Path      string          `yaml:"path"`
	Parent    *publicServices `yaml:"-"`
}
type accountEndpoints struct {
	Create        create        `yaml:"create"`
	CreateProfile createProfile `yaml:"create_profile"`
	Login         login         `yaml:"login"`
	Logout        logout        `yaml:"logout"`
	Whoami        whoami        `yaml:"whoami"`
	Parent        *Account      `yaml:"-"`
}
type assign struct {
	Method string         `yaml:"method"`
	Path   string         `yaml:"path"`
	Parent *tagsEndpoints `yaml:"-"`
}
type attach struct {
	Method string               `yaml:"method"`
	Path   string               `yaml:"path"`
	Parent *objectivesEndpoints `yaml:"-"`
}
type create struct {
	Method string            `yaml:"method"`
	Path   string            `yaml:"path"`
	Parent *accountEndpoints `yaml:"-"`
}
type createProfile struct {
	Method string            `yaml:"method"`
	Path   string            `yaml:"path"`
	Parent *accountEndpoints `yaml:"-"`
}
type creation struct {
	Method string         `yaml:"method"`
	Path   string         `yaml:"path"`
	Parent *tagsEndpoints `yaml:"-"`
}
type delete struct {
	Method string               `yaml:"method"`
	Path   string               `yaml:"path"`
	Parent *objectivesEndpoints `yaml:"-"`
}
type documentEndpoints struct {
	List   list      `yaml:"list"`
	Parent *Document `yaml:"-"`
}
type endpoints struct {
	ListInstances    listInstances    `yaml:"list-instances"`
	RecheckInstance  recheckInstance  `yaml:"recheck-instance"`
	RegisterInstance registerInstance `yaml:"register-instance"`
	Parent           *Discovery       `yaml:"-"`
}
type endpointsCreate struct {
	Method string               `yaml:"method"`
	Path   string               `yaml:"path"`
	Parent *objectivesEndpoints `yaml:"-"`
}
type list struct {
	Method string             `yaml:"method"`
	Path   string             `yaml:"path"`
	Parent *documentEndpoints `yaml:"-"`
}
type listInstances struct {
	Method string     `yaml:"method"`
	Path   string     `yaml:"path"`
	Parent *endpoints `yaml:"-"`
}
type login struct {
	Method string            `yaml:"method"`
	Path   string            `yaml:"path"`
	Parent *accountEndpoints `yaml:"-"`
}
type logout struct {
	Method string            `yaml:"method"`
	Path   string            `yaml:"path"`
	Parent *accountEndpoints `yaml:"-"`
}
type mark struct {
	Method string               `yaml:"method"`
	Path   string               `yaml:"path"`
	Parent *objectivesEndpoints `yaml:"-"`
}
type objectivesEndpoints struct {
	Attach    attach          `yaml:"attach"`
	Create    endpointsCreate `yaml:"create"`
	Delete    delete          `yaml:"delete"`
	Mark      mark            `yaml:"mark"`
	Placement placement       `yaml:"placement"`
	Parent    *Objectives     `yaml:"-"`
}
type placement struct {
	Method string               `yaml:"method"`
	Path   string               `yaml:"path"`
	Parent *objectivesEndpoints `yaml:"-"`
}
type publicServices struct {
	Account    Account    `yaml:"account"`
	Document   Document   `yaml:"document"`
	Objectives Objectives `yaml:"objectives"`
	Tags       Tags       `yaml:"tags"`
	Parent     *Public    `yaml:"-"`
}
type recheckInstance struct {
	Method string     `yaml:"method"`
	Path   string     `yaml:"path"`
	Parent *endpoints `yaml:"-"`
}
type registerInstance struct {
	Method string     `yaml:"method"`
	Path   string     `yaml:"path"`
	Parent *endpoints `yaml:"-"`
}
type services struct {
	Discovery Discovery `yaml:"discovery"`
	Parent    *Internal `yaml:"-"`
}
type tagsEndpoints struct {
	Assign   assign   `yaml:"assign"`
	Creation creation `yaml:"creation"`
	Parent   *Tags    `yaml:"-"`
}
type whoami struct {
	Method string            `yaml:"method"`
	Path   string            `yaml:"path"`
	Parent *accountEndpoints `yaml:"-"`
}
type Config struct {
	Internal Internal `yaml:"internal"`
	Public   Public   `yaml:"public"`
}

func parentRefAssignments(c *Config) {
	c.Internal.Services.Parent = &c.Internal
	c.Internal.Services.Discovery.Parent = &c.Internal.Services
	c.Internal.Services.Discovery.Endpoints.Parent = &c.Internal.Services.Discovery
	c.Internal.Services.Discovery.Endpoints.ListInstances.Parent = &c.Internal.Services.Discovery.Endpoints
	c.Internal.Services.Discovery.Endpoints.RecheckInstance.Parent = &c.Internal.Services.Discovery.Endpoints
	c.Internal.Services.Discovery.Endpoints.RegisterInstance.Parent = &c.Internal.Services.Discovery.Endpoints
	c.Public.Services.Parent = &c.Public
	c.Public.Services.Account.Parent = &c.Public.Services
	c.Public.Services.Account.Endpoints.Parent = &c.Public.Services.Account
	c.Public.Services.Account.Endpoints.Create.Parent = &c.Public.Services.Account.Endpoints
	c.Public.Services.Account.Endpoints.CreateProfile.Parent = &c.Public.Services.Account.Endpoints
	c.Public.Services.Account.Endpoints.Login.Parent = &c.Public.Services.Account.Endpoints
	c.Public.Services.Account.Endpoints.Logout.Parent = &c.Public.Services.Account.Endpoints
	c.Public.Services.Account.Endpoints.Whoami.Parent = &c.Public.Services.Account.Endpoints
	c.Public.Services.Document.Parent = &c.Public.Services
	c.Public.Services.Document.Endpoints.Parent = &c.Public.Services.Document
	c.Public.Services.Document.Endpoints.List.Parent = &c.Public.Services.Document.Endpoints
	c.Public.Services.Objectives.Parent = &c.Public.Services
	c.Public.Services.Objectives.Endpoints.Parent = &c.Public.Services.Objectives
	c.Public.Services.Objectives.Endpoints.Attach.Parent = &c.Public.Services.Objectives.Endpoints
	c.Public.Services.Objectives.Endpoints.Create.Parent = &c.Public.Services.Objectives.Endpoints
	c.Public.Services.Objectives.Endpoints.Delete.Parent = &c.Public.Services.Objectives.Endpoints
	c.Public.Services.Objectives.Endpoints.Mark.Parent = &c.Public.Services.Objectives.Endpoints
	c.Public.Services.Objectives.Endpoints.Placement.Parent = &c.Public.Services.Objectives.Endpoints
	c.Public.Services.Tags.Parent = &c.Public.Services
	c.Public.Services.Tags.Endpoints.Parent = &c.Public.Services.Tags
	c.Public.Services.Tags.Endpoints.Assign.Parent = &c.Public.Services.Tags.Endpoints
	c.Public.Services.Tags.Endpoints.Creation.Parent = &c.Public.Services.Tags.Endpoints
}
func ReadConfig(path string) (*Config, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, fmt.Errorf("opening config file: %w", err)
	}
	defer file.Close()
	c := &Config{}
	err = yaml.NewDecoder(file).Decode(c)
	if err != nil {
		return nil, fmt.Errorf("decoding config file: %w", err)
	}
	parentRefAssignments(c)
	return c, nil
}
func (a Account) GetParent() any {
	return a.Parent
}
func (a Account) GetPath() string {
	return a.Path
}
func (a *Account) SetPath(v string) {
	a.Path = v
}
func (d Discovery) GetParent() any {
	return d.Parent
}
func (d Discovery) GetPath() string {
	return d.Path
}
func (d *Discovery) SetPath(v string) {
	d.Path = v
}
func (d Document) GetParent() any {
	return d.Parent
}
func (d Document) GetPath() string {
	return d.Path
}
func (d *Document) SetPath(v string) {
	d.Path = v
}
func (i Internal) GetPath() string {
	return i.Path
}
func (i *Internal) SetPath(v string) {
	i.Path = v
}
func (o Objectives) GetParent() any {
	return o.Parent
}
func (o Objectives) GetPath() string {
	return o.Path
}
func (o *Objectives) SetPath(v string) {
	o.Path = v
}
func (p Public) GetPath() string {
	return p.Path
}
func (p *Public) SetPath(v string) {
	p.Path = v
}
func (t Tags) GetParent() any {
	return t.Parent
}
func (t Tags) GetPath() string {
	return t.Path
}
func (t *Tags) SetPath(v string) {
	t.Path = v
}
func (a accountEndpoints) GetParent() any {
	return a.Parent
}
func (a assign) GetMethod() string {
	return a.Method
}
func (a assign) GetParent() any {
	return a.Parent
}
func (a assign) GetPath() string {
	return a.Path
}
func (a *assign) SetMethod(v string) {
	a.Method = v
}
func (a *assign) SetPath(v string) {
	a.Path = v
}
func (a attach) GetMethod() string {
	return a.Method
}
func (a attach) GetParent() any {
	return a.Parent
}
func (a attach) GetPath() string {
	return a.Path
}
func (a *attach) SetMethod(v string) {
	a.Method = v
}
func (a *attach) SetPath(v string) {
	a.Path = v
}
func (c create) GetMethod() string {
	return c.Method
}
func (c create) GetParent() any {
	return c.Parent
}
func (c create) GetPath() string {
	return c.Path
}
func (c *create) SetMethod(v string) {
	c.Method = v
}
func (c *create) SetPath(v string) {
	c.Path = v
}
func (c createProfile) GetMethod() string {
	return c.Method
}
func (c createProfile) GetParent() any {
	return c.Parent
}
func (c createProfile) GetPath() string {
	return c.Path
}
func (c *createProfile) SetMethod(v string) {
	c.Method = v
}
func (c *createProfile) SetPath(v string) {
	c.Path = v
}
func (c creation) GetMethod() string {
	return c.Method
}
func (c creation) GetParent() any {
	return c.Parent
}
func (c creation) GetPath() string {
	return c.Path
}
func (c *creation) SetMethod(v string) {
	c.Method = v
}
func (c *creation) SetPath(v string) {
	c.Path = v
}
func (d delete) GetMethod() string {
	return d.Method
}
func (d delete) GetParent() any {
	return d.Parent
}
func (d delete) GetPath() string {
	return d.Path
}
func (d *delete) SetMethod(v string) {
	d.Method = v
}
func (d *delete) SetPath(v string) {
	d.Path = v
}
func (d documentEndpoints) GetParent() any {
	return d.Parent
}
func (e endpoints) GetParent() any {
	return e.Parent
}
func (e endpointsCreate) GetMethod() string {
	return e.Method
}
func (e endpointsCreate) GetParent() any {
	return e.Parent
}
func (e endpointsCreate) GetPath() string {
	return e.Path
}
func (e *endpointsCreate) SetMethod(v string) {
	e.Method = v
}
func (e *endpointsCreate) SetPath(v string) {
	e.Path = v
}
func (l list) GetMethod() string {
	return l.Method
}
func (l list) GetParent() any {
	return l.Parent
}
func (l list) GetPath() string {
	return l.Path
}
func (l *list) SetMethod(v string) {
	l.Method = v
}
func (l *list) SetPath(v string) {
	l.Path = v
}
func (l listInstances) GetMethod() string {
	return l.Method
}
func (l listInstances) GetParent() any {
	return l.Parent
}
func (l listInstances) GetPath() string {
	return l.Path
}
func (l *listInstances) SetMethod(v string) {
	l.Method = v
}
func (l *listInstances) SetPath(v string) {
	l.Path = v
}
func (l login) GetMethod() string {
	return l.Method
}
func (l login) GetParent() any {
	return l.Parent
}
func (l login) GetPath() string {
	return l.Path
}
func (l *login) SetMethod(v string) {
	l.Method = v
}
func (l *login) SetPath(v string) {
	l.Path = v
}
func (l logout) GetMethod() string {
	return l.Method
}
func (l logout) GetParent() any {
	return l.Parent
}
func (l logout) GetPath() string {
	return l.Path
}
func (l *logout) SetMethod(v string) {
	l.Method = v
}
func (l *logout) SetPath(v string) {
	l.Path = v
}
func (m mark) GetMethod() string {
	return m.Method
}
func (m mark) GetParent() any {
	return m.Parent
}
func (m mark) GetPath() string {
	return m.Path
}
func (m *mark) SetMethod(v string) {
	m.Method = v
}
func (m *mark) SetPath(v string) {
	m.Path = v
}
func (o objectivesEndpoints) GetParent() any {
	return o.Parent
}
func (p placement) GetMethod() string {
	return p.Method
}
func (p placement) GetParent() any {
	return p.Parent
}
func (p placement) GetPath() string {
	return p.Path
}
func (p *placement) SetMethod(v string) {
	p.Method = v
}
func (p *placement) SetPath(v string) {
	p.Path = v
}
func (p publicServices) GetParent() any {
	return p.Parent
}
func (r recheckInstance) GetMethod() string {
	return r.Method
}
func (r recheckInstance) GetParent() any {
	return r.Parent
}
func (r recheckInstance) GetPath() string {
	return r.Path
}
func (r *recheckInstance) SetMethod(v string) {
	r.Method = v
}
func (r *recheckInstance) SetPath(v string) {
	r.Path = v
}
func (r registerInstance) GetMethod() string {
	return r.Method
}
func (r registerInstance) GetParent() any {
	return r.Parent
}
func (r registerInstance) GetPath() string {
	return r.Path
}
func (r *registerInstance) SetMethod(v string) {
	r.Method = v
}
func (r *registerInstance) SetPath(v string) {
	r.Path = v
}
func (s services) GetParent() any {
	return s.Parent
}
func (t tagsEndpoints) GetParent() any {
	return t.Parent
}
func (w whoami) GetMethod() string {
	return w.Method
}
func (w whoami) GetParent() any {
	return w.Parent
}
func (w whoami) GetPath() string {
	return w.Path
}
func (w *whoami) SetMethod(v string) {
	w.Method = v
}
func (w *whoami) SetPath(v string) {
	w.Path = v
}
